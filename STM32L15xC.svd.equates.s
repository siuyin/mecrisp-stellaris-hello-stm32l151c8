@ arm-none-eabi-as equates file for STM32L15xC
@ SVD2GAS Equates Generator, Copyright Terry Porter 2017 "terry@tjporter.com.au" for arm-none-eabi-as 
@ Matthias Koch Complimentary Edition 2017
@ Takes a CMSIS-SVD file plus a hand edited config.xml file as input 
@ Licensed under the GPL, see http://www.gnu.org/licenses/


@=========================== C_ADC ===========================@
.equ C_ADC_BASE, 0x40012700 @ (Common ADC registers) 
    .equ C_ADC_CSR, C_ADC_BASE + 0x0 @ (ADC Common status register) 
        .equ C_ADC_ADONS1_Shift, 6   @ bitWidth 1 (ADON Status of ADC)  
        .equ C_ADC_OVR1_Shift, 5   @ bitWidth 1 (Overrun flag of ADC 1)  
        .equ C_ADC_STRT1_Shift, 4   @ bitWidth 1 (Regular channel Start flag of ADC  1)  
        .equ C_ADC_JSTRT1_Shift, 3   @ bitWidth 1 (Injected channel Start flag of ADC  1)  
        .equ C_ADC_JEOC1_Shift, 2   @ bitWidth 1 (Injected channel end of conversion of  ADC 1)  
        .equ C_ADC_EOC1_Shift, 1   @ bitWidth 1 (End of conversion of ADC 1)  
        .equ C_ADC_AWD1_Shift, 0   @ bitWidth 1 (Analog watchdog flag of ADC  1)  
 
    .equ C_ADC_CCR, C_ADC_BASE + 0x4 @ (ADC common control register) 
        .equ C_ADC_TSVREFE_Shift, 23   @ bitWidth 1 (Temperature sensor and VREFINT  enable)  
        .equ C_ADC_ADCPRE_Shift, 16   @ bitWidth 2 (ADC prescaler)  
 

@=========================== COMP ===========================@
.equ COMP_BASE, 0x40007C00 @ (Comparators) 
    .equ COMP_CSR, COMP_BASE + 0x0 @ (comparator control and status  register) 
        .equ COMP_TSUSP_Shift, 31   @ bitWidth 1 (Suspend Timer Mode)  
        .equ COMP_CAIF_Shift, 30   @ bitWidth 1 (Channel acquisition interrupt  flag)  
        .equ COMP_CAIE_Shift, 29   @ bitWidth 1 (Channel Acquisition Interrupt Enable /  Clear)  
        .equ COMP_RCH13_Shift, 28   @ bitWidth 1 (Select GPIO port PC3 as re-routed ADC  input channel CH13.)  
        .equ COMP_FCH8_Shift, 27   @ bitWidth 1 (Select GPIO port PB0 as fast ADC input  channel CH8.)  
        .equ COMP_FCH3_Shift, 26   @ bitWidth 1 (Select GPIO port PA3 as fast ADC input  channel CH3.)  
        .equ COMP_OUTSEL_Shift, 21   @ bitWidth 3 (Comparator 2 output  selection)  
        .equ COMP_INSEL_Shift, 18   @ bitWidth 3 (Inverted input selection)  
        .equ COMP_WNDWE_Shift, 17   @ bitWidth 1 (Window mode enable)  
        .equ COMP_VREFOUTEN_Shift, 16   @ bitWidth 1 (VREFINT output enable)  
        .equ COMP_CMP2OUT_Shift, 13   @ bitWidth 1 (Comparator 2 output)  
        .equ COMP_SPEED_Shift, 12   @ bitWidth 1 (Comparator 2 speed mode)  
        .equ COMP_CMP1OUT_Shift, 7   @ bitWidth 1 (Comparator 1 output)  
        .equ COMP_SW1_Shift, 5   @ bitWidth 1 (SW1 analog switch enable)  
        .equ COMP_CMP1EN_Shift, 4   @ bitWidth 1 (Comparator 1 enable)  
        .equ COMP_PD400K_Shift, 3   @ bitWidth 1 (400 kO pull-down resistor)  
        .equ COMP_PD10K_Shift, 2   @ bitWidth 1 (10 kO pull-down resistor)  
        .equ COMP_PU400K_Shift, 1   @ bitWidth 1 (400 kO pull-up resistor)  
        .equ COMP_PU10K_Shift, 0   @ bitWidth 1 (10 kO pull-up resistor)  
 

@=========================== CRC ===========================@
.equ CRC_BASE, 0x40023000 @ (CRC calculation unit) 
    .equ CRC_DR, CRC_BASE + 0x0 @ (Data register) 
        .equ CRC_Data_register_Shift, 0   @ bitWidth 32 (Data Register)  
 
    .equ CRC_IDR, CRC_BASE + 0x4 @ (Independent data register) 
        .equ CRC_Independent_data_register_Shift, 0   @ bitWidth 7 (Independent data register)  
 
    .equ CRC_CR, CRC_BASE + 0x8 @ (Control register) 
        .equ CRC_RESET_Shift, 0   @ bitWidth 1 (RESET)  
 

@=========================== DAC ===========================@
.equ DAC_BASE, 0x40007400 @ (Digital-to-analog converter) 
    .equ DAC_CR, DAC_BASE + 0x0 @ (control register) 
        .equ DAC_DMAUDRIE2_Shift, 29   @ bitWidth 1 (DAC channel2 DMA underrun interrupt  enable)  
        .equ DAC_DMAEN2_Shift, 28   @ bitWidth 1 (DAC channel2 DMA enable)  
        .equ DAC_MAMP2_Shift, 24   @ bitWidth 4 (DAC channel2 mask/amplitude  selector)  
        .equ DAC_WAVE2_Shift, 22   @ bitWidth 2 (DAC channel2 noise/triangle wave  generation enable)  
        .equ DAC_TSEL2_Shift, 19   @ bitWidth 3 (DAC channel2 trigger  selection)  
        .equ DAC_TEN2_Shift, 18   @ bitWidth 1 (DAC channel2 trigger  enable)  
        .equ DAC_BOFF2_Shift, 17   @ bitWidth 1 (DAC channel2 output buffer  disable)  
        .equ DAC_EN2_Shift, 16   @ bitWidth 1 (DAC channel2 enable)  
        .equ DAC_DMAUDRIE1_Shift, 13   @ bitWidth 1 (DAC channel1 DMA Underrun Interrupt  enable)  
        .equ DAC_DMAEN1_Shift, 12   @ bitWidth 1 (DAC channel1 DMA enable)  
        .equ DAC_MAMP1_Shift, 8   @ bitWidth 4 (DAC channel1 mask/amplitude  selector)  
        .equ DAC_WAVE1_Shift, 6   @ bitWidth 2 (DAC channel1 noise/triangle wave  generation enable)  
        .equ DAC_TSEL1_Shift, 3   @ bitWidth 3 (DAC channel1 trigger  selection)  
        .equ DAC_TEN1_Shift, 2   @ bitWidth 1 (DAC channel1 trigger  enable)  
        .equ DAC_BOFF1_Shift, 1   @ bitWidth 1 (DAC channel1 output buffer  disable)  
        .equ DAC_EN1_Shift, 0   @ bitWidth 1 (DAC channel1 enable)  
 
    .equ DAC_SWTRIGR, DAC_BASE + 0x4 @ (software trigger register) 
        .equ DAC_SWTRIG2_Shift, 1   @ bitWidth 1 (DAC channel2 software  trigger)  
        .equ DAC_SWTRIG1_Shift, 0   @ bitWidth 1 (DAC channel1 software  trigger)  
 
    .equ DAC_DHR12R1, DAC_BASE + 0x8 @ (channel1 12-bit right-aligned data holding  register) 
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned  data)  
 
    .equ DAC_DHR12L1, DAC_BASE + 0xC @ (channel1 12-bit left aligned data holding  register) 
        .equ DAC_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned  data)  
 
    .equ DAC_DHR8R1, DAC_BASE + 0x10 @ (channel1 8-bit right aligned data holding  register) 
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned  data)  
 
    .equ DAC_DHR12R2, DAC_BASE + 0x14 @ (channel2 12-bit right aligned data holding  register) 
        .equ DAC_DACC2DHR_Shift, 0   @ bitWidth 12 (DAC channel2 12-bit right-aligned  data)  
 
    .equ DAC_DHR12L2, DAC_BASE + 0x18 @ (channel2 12-bit left aligned data holding  register) 
        .equ DAC_DACC2DHR_Shift, 4   @ bitWidth 12 (DAC channel2 12-bit left-aligned  data)  
 
    .equ DAC_DHR8R2, DAC_BASE + 0x1C @ (channel2 8-bit right-aligned data holding  register) 
        .equ DAC_DACC2DHR_Shift, 0   @ bitWidth 8 (DAC channel2 8-bit right-aligned  data)  
 
    .equ DAC_DHR12RD, DAC_BASE + 0x20 @ (Dual DAC 12-bit right-aligned data holding  register) 
        .equ DAC_DACC2DHR_Shift, 16   @ bitWidth 12 (DAC channel2 12-bit right-aligned  data)  
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned  data)  
 
    .equ DAC_DHR12LD, DAC_BASE + 0x24 @ (DUAL DAC 12-bit left aligned data holding  register) 
        .equ DAC_DACC2DHR_Shift, 20   @ bitWidth 12 (DAC channel2 12-bit left-aligned  data)  
        .equ DAC_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned  data)  
 
    .equ DAC_DHR8RD, DAC_BASE + 0x28 @ (DUAL DAC 8-bit right aligned data holding  register) 
        .equ DAC_DACC2DHR_Shift, 8   @ bitWidth 8 (DAC channel2 8-bit right-aligned  data)  
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned  data)  
 
    .equ DAC_DOR1, DAC_BASE + 0x2C @ (channel1 data output register) 
        .equ DAC_DACC1DOR_Shift, 0   @ bitWidth 12 (DAC channel1 data output)  
 
    .equ DAC_DOR2, DAC_BASE + 0x30 @ (channel2 data output register) 
        .equ DAC_DACC2DOR_Shift, 0   @ bitWidth 12 (DAC channel2 data output)  
 
    .equ DAC_SR, DAC_BASE + 0x34 @ (status register) 
        .equ DAC_DMAUDR2_Shift, 29   @ bitWidth 1 (DAC channel2 DMA underrun  flag)  
        .equ DAC_DMAUDR1_Shift, 13   @ bitWidth 1 (DAC channel1 DMA underrun  flag)  
 

@=========================== DMA1 ===========================@
.equ DMA1_BASE, 0x40026000 @ (Direct memory access controller) 
    .equ DMA1_ISR, DMA1_BASE + 0x0 @ (interrupt status register) 
        .equ DMA1_TEIF7_Shift, 27   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_HTIF7_Shift, 26   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_TCIF7_Shift, 25   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_GIF7_Shift, 24   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_TEIF6_Shift, 23   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_HTIF6_Shift, 22   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_TCIF6_Shift, 21   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_GIF6_Shift, 20   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_TEIF5_Shift, 19   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_HTIF5_Shift, 18   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_TCIF5_Shift, 17   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_GIF5_Shift, 16   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_TEIF4_Shift, 15   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_HTIF4_Shift, 14   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_TCIF4_Shift, 13   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_GIF4_Shift, 12   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_TEIF3_Shift, 11   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_HTIF3_Shift, 10   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_TCIF3_Shift, 9   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_GIF3_Shift, 8   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_TEIF2_Shift, 7   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_HTIF2_Shift, 6   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_TCIF2_Shift, 5   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_GIF2_Shift, 4   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_TEIF1_Shift, 3   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_HTIF1_Shift, 2   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_TCIF1_Shift, 1   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_GIF1_Shift, 0   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
 
    .equ DMA1_IFCR, DMA1_BASE + 0x4 @ (interrupt flag clear register) 
        .equ DMA1_CTEIF7_Shift, 27   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_CHTIF7_Shift, 26   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_CTCIF7_Shift, 25   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_CGIF7_Shift, 24   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_CTEIF6_Shift, 23   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_CHTIF6_Shift, 22   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_CTCIF6_Shift, 21   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_CGIF6_Shift, 20   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_CTEIF5_Shift, 19   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_CHTIF5_Shift, 18   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_CTCIF5_Shift, 17   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_CGIF5_Shift, 16   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_CTEIF4_Shift, 15   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_CHTIF4_Shift, 14   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_CTCIF4_Shift, 13   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_CGIF4_Shift, 12   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_CTEIF3_Shift, 11   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_CHTIF3_Shift, 10   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_CTCIF3_Shift, 9   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_CGIF3_Shift, 8   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_CTEIF2_Shift, 7   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_CHTIF2_Shift, 6   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_CTCIF2_Shift, 5   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_CGIF2_Shift, 4   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_CTEIF1_Shift, 3   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_CHTIF1_Shift, 2   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_CTCIF1_Shift, 1   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_CGIF1_Shift, 0   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
 
    .equ DMA1_CCR1, DMA1_BASE + 0x8 @ (channel x configuration  register) 
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR1, DMA1_BASE + 0xC @ (channel x number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR1, DMA1_BASE + 0x10 @ (channel x peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR1, DMA1_BASE + 0x14 @ (channel x memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR2, DMA1_BASE + 0x1C @ (channel x configuration  register) 
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR2, DMA1_BASE + 0x20 @ (channel x number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR2, DMA1_BASE + 0x24 @ (channel x peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR2, DMA1_BASE + 0x28 @ (channel x memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR3, DMA1_BASE + 0x30 @ (channel x configuration  register) 
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR3, DMA1_BASE + 0x34 @ (channel x number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR3, DMA1_BASE + 0x38 @ (channel x peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR3, DMA1_BASE + 0x3C @ (channel x memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR4, DMA1_BASE + 0x44 @ (channel x configuration  register) 
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR4, DMA1_BASE + 0x48 @ (channel x number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR4, DMA1_BASE + 0x4C @ (channel x peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR4, DMA1_BASE + 0x50 @ (channel x memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR5, DMA1_BASE + 0x58 @ (channel x configuration  register) 
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR5, DMA1_BASE + 0x5C @ (channel x number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR5, DMA1_BASE + 0x60 @ (channel x peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR5, DMA1_BASE + 0x64 @ (channel x memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR6, DMA1_BASE + 0x6C @ (channel x configuration  register) 
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR6, DMA1_BASE + 0x70 @ (channel x number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR6, DMA1_BASE + 0x74 @ (channel x peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR6, DMA1_BASE + 0x78 @ (channel x memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR7, DMA1_BASE + 0x80 @ (channel x configuration  register) 
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR7, DMA1_BASE + 0x84 @ (channel x number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR7, DMA1_BASE + 0x88 @ (channel x peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR7, DMA1_BASE + 0x8C @ (channel x memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 

@=========================== DMA2 ===========================@
.equ DMA2_BASE, 0x40026400 @ (Direct memory access controller) 
    .equ DMA2_ISR, DMA2_BASE + 0x0 @ (interrupt status register) 
        .equ DMA2_TEIF7_Shift, 27   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_HTIF7_Shift, 26   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_TCIF7_Shift, 25   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_GIF7_Shift, 24   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_TEIF6_Shift, 23   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_HTIF6_Shift, 22   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_TCIF6_Shift, 21   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_GIF6_Shift, 20   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_TEIF5_Shift, 19   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_HTIF5_Shift, 18   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_TCIF5_Shift, 17   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_GIF5_Shift, 16   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_TEIF4_Shift, 15   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_HTIF4_Shift, 14   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_TCIF4_Shift, 13   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_GIF4_Shift, 12   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_TEIF3_Shift, 11   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_HTIF3_Shift, 10   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_TCIF3_Shift, 9   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_GIF3_Shift, 8   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_TEIF2_Shift, 7   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_HTIF2_Shift, 6   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_TCIF2_Shift, 5   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_GIF2_Shift, 4   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_TEIF1_Shift, 3   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_HTIF1_Shift, 2   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_TCIF1_Shift, 1   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_GIF1_Shift, 0   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
 
    .equ DMA2_IFCR, DMA2_BASE + 0x4 @ (interrupt flag clear register) 
        .equ DMA2_CTEIF7_Shift, 27   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_CHTIF7_Shift, 26   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_CTCIF7_Shift, 25   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_CGIF7_Shift, 24   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_CTEIF6_Shift, 23   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_CHTIF6_Shift, 22   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_CTCIF6_Shift, 21   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_CGIF6_Shift, 20   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_CTEIF5_Shift, 19   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_CHTIF5_Shift, 18   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_CTCIF5_Shift, 17   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_CGIF5_Shift, 16   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_CTEIF4_Shift, 15   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_CHTIF4_Shift, 14   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_CTCIF4_Shift, 13   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_CGIF4_Shift, 12   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_CTEIF3_Shift, 11   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_CHTIF3_Shift, 10   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_CTCIF3_Shift, 9   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_CGIF3_Shift, 8   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_CTEIF2_Shift, 7   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_CHTIF2_Shift, 6   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_CTCIF2_Shift, 5   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_CGIF2_Shift, 4   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_CTEIF1_Shift, 3   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_CHTIF1_Shift, 2   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_CTCIF1_Shift, 1   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_CGIF1_Shift, 0   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
 
    .equ DMA2_CCR1, DMA2_BASE + 0x8 @ (channel x configuration  register) 
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR1, DMA2_BASE + 0xC @ (channel x number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR1, DMA2_BASE + 0x10 @ (channel x peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR1, DMA2_BASE + 0x14 @ (channel x memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR2, DMA2_BASE + 0x1C @ (channel x configuration  register) 
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR2, DMA2_BASE + 0x20 @ (channel x number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR2, DMA2_BASE + 0x24 @ (channel x peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR2, DMA2_BASE + 0x28 @ (channel x memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR3, DMA2_BASE + 0x30 @ (channel x configuration  register) 
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR3, DMA2_BASE + 0x34 @ (channel x number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR3, DMA2_BASE + 0x38 @ (channel x peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR3, DMA2_BASE + 0x3C @ (channel x memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR4, DMA2_BASE + 0x44 @ (channel x configuration  register) 
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR4, DMA2_BASE + 0x48 @ (channel x number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR4, DMA2_BASE + 0x4C @ (channel x peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR4, DMA2_BASE + 0x50 @ (channel x memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR5, DMA2_BASE + 0x58 @ (channel x configuration  register) 
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR5, DMA2_BASE + 0x5C @ (channel x number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR5, DMA2_BASE + 0x60 @ (channel x peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR5, DMA2_BASE + 0x64 @ (channel x memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR6, DMA2_BASE + 0x6C @ (channel x configuration  register) 
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR6, DMA2_BASE + 0x70 @ (channel x number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR6, DMA2_BASE + 0x74 @ (channel x peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR6, DMA2_BASE + 0x78 @ (channel x memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR7, DMA2_BASE + 0x80 @ (channel x configuration  register) 
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR7, DMA2_BASE + 0x84 @ (channel x number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR7, DMA2_BASE + 0x88 @ (channel x peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR7, DMA2_BASE + 0x8C @ (channel x memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 

@=========================== EXTI ===========================@
.equ EXTI_BASE, 0x40010400 @ (External interrupt/event  controller) 
    .equ EXTI_IMR, EXTI_BASE + 0x0 @ (IMR) 
        .equ EXTI_MR_Shift, 0   @ bitWidth 23 (Interrupt mask on line x)  
 
    .equ EXTI_EMR, EXTI_BASE + 0x4 @ (EMR) 
        .equ EXTI_MR_Shift, 0   @ bitWidth 23 (Event mask on line x)  
 
    .equ EXTI_RTSR, EXTI_BASE + 0x8 @ (RTSR) 
        .equ EXTI_TR_Shift, 0   @ bitWidth 23 (Rising edge trigger event configuration  bit of line x)  
 
    .equ EXTI_FTSR, EXTI_BASE + 0xC @ (FTSR) 
        .equ EXTI_TR_Shift, 0   @ bitWidth 23 (Falling edge trigger event configuration  bit of line x)  
 
    .equ EXTI_SWIER, EXTI_BASE + 0x10 @ (SWIER) 
        .equ EXTI_SWIER_Shift, 0   @ bitWidth 23 (Software interrupt on line  x)  
 
    .equ EXTI_PR, EXTI_BASE + 0x14 @ (PR) 
        .equ EXTI_PR_Shift, 0   @ bitWidth 23 (Pending bit)  
 

@=========================== Flash ===========================@
.equ Flash_BASE, 0x40023C00 @ (Flash) 
    .equ Flash_ACR, Flash_BASE + 0x0 @ (Access control register) 
        .equ Flash_LATENCY_Shift, 0   @ bitWidth 1 (Latency)  
        .equ Flash_PRFTEN_Shift, 1   @ bitWidth 1 (Prefetch enable)  
        .equ Flash_ACC64_Shift, 2   @ bitWidth 1 (64-bit access)  
        .equ Flash_SLEEP_PD_Shift, 3   @ bitWidth 1 (Flash mode during Sleep)  
        .equ Flash_RUN_PD_Shift, 4   @ bitWidth 1 (Flash mode during Run)  
 
    .equ Flash_PECR, Flash_BASE + 0x4 @ (Program/erase control register) 
        .equ Flash_PELOCK_Shift, 0   @ bitWidth 1 (FLASH_PECR and data EEPROM  lock)  
        .equ Flash_PRGLOCK_Shift, 1   @ bitWidth 1 (Program memory lock)  
        .equ Flash_OPTLOCK_Shift, 2   @ bitWidth 1 (Option bytes block lock)  
        .equ Flash_PROG_Shift, 3   @ bitWidth 1 (Program memory selection)  
        .equ Flash_DATA_Shift, 4   @ bitWidth 1 (Data EEPROM selection)  
        .equ Flash_FTDW_Shift, 8   @ bitWidth 1 (Fixed time data write for Byte, Half  Word and Word programming)  
        .equ Flash_ERASE_Shift, 9   @ bitWidth 1 (Page or Double Word erase  mode)  
        .equ Flash_FPRG_Shift, 10   @ bitWidth 1 (Half Page/Double Word programming  mode)  
        .equ Flash_PARALLELBANK_Shift, 15   @ bitWidth 1 (Parallel bank mode)  
        .equ Flash_EOPIE_Shift, 16   @ bitWidth 1 (End of programming interrupt  enable)  
        .equ Flash_ERRIE_Shift, 17   @ bitWidth 1 (Error interrupt enable)  
        .equ Flash_OBL_LAUNCH_Shift, 18   @ bitWidth 1 (Launch the option byte  loading)  
 
    .equ Flash_PDKEYR, Flash_BASE + 0x8 @ (Power down key register) 
        .equ Flash_PDKEYR_Shift, 0   @ bitWidth 32 (RUN_PD in FLASH_ACR key)  
 
    .equ Flash_PEKEYR, Flash_BASE + 0xC @ (Program/erase key register) 
        .equ Flash_PEKEYR_Shift, 0   @ bitWidth 32 (FLASH_PEC and data EEPROM  key)  
 
    .equ Flash_PRGKEYR, Flash_BASE + 0x10 @ (Program memory key register) 
        .equ Flash_PRGKEYR_Shift, 0   @ bitWidth 32 (Program memory key)  
 
    .equ Flash_OPTKEYR, Flash_BASE + 0x14 @ (Option byte key register) 
        .equ Flash_OPTKEYR_Shift, 0   @ bitWidth 32 (Option byte key)  
 
    .equ Flash_SR, Flash_BASE + 0x18 @ (Status register) 
        .equ Flash_BSY_Shift, 0   @ bitWidth 1 (Write/erase operations in  progress)  
        .equ Flash_EOP_Shift, 1   @ bitWidth 1 (End of operation)  
        .equ Flash_ENDHV_Shift, 2   @ bitWidth 1 (End of high voltage)  
        .equ Flash_READY_Shift, 3   @ bitWidth 1 (Flash memory module ready after low  power mode)  
        .equ Flash_WRPERR_Shift, 8   @ bitWidth 1 (Write protected error)  
        .equ Flash_PGAERR_Shift, 9   @ bitWidth 1 (Programming alignment  error)  
        .equ Flash_SIZERR_Shift, 10   @ bitWidth 1 (Size error)  
        .equ Flash_OPTVERR_Shift, 11   @ bitWidth 1 (Option validity error)  
        .equ Flash_OPTVERRUSR_Shift, 12   @ bitWidth 1 (Option UserValidity Error)  
 
    .equ Flash_OBR, Flash_BASE + 0x1C @ (Option byte register) 
        .equ Flash_RDPRT_Shift, 0   @ bitWidth 8 (Read protection)  
        .equ Flash_BOR_LEV_Shift, 16   @ bitWidth 4 (BOR_LEV)  
        .equ Flash_IWDG_SW_Shift, 20   @ bitWidth 1 (IWDG_SW)  
        .equ Flash_nRTS_STOP_Shift, 21   @ bitWidth 1 (nRTS_STOP)  
        .equ Flash_nRST_STDBY_Shift, 22   @ bitWidth 1 (nRST_STDBY)  
        .equ Flash_BFB2_Shift, 23   @ bitWidth 1 (Boot From Bank 2)  
 
    .equ Flash_WRPR1, Flash_BASE + 0x20 @ (Write protection register) 
        .equ Flash_WRP1_Shift, 0   @ bitWidth 32 (Write protection)  
 
    .equ Flash_WRPR2, Flash_BASE + 0x80 @ (Write protection register) 
        .equ Flash_WRP2_Shift, 0   @ bitWidth 32 (WRP2)  
 
    .equ Flash_WRPR3, Flash_BASE + 0x84 @ (Write protection register) 
        .equ Flash_WRP3_Shift, 0   @ bitWidth 32 (WRP3)  
 

@=========================== GPIOA ===========================@
.equ GPIOA_BASE, 0x40020000 @ (General-purpose I/Os) 
    .equ GPIOA_MODER, GPIOA_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOA_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_OTYPER, GPIOA_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOA_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_OSPEEDER, GPIOA_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOA_OSPEEDR15_Shift, 30   @ bitWidth 2 (OSPEEDR15)  
        .equ GPIOA_OSPEEDR14_Shift, 28   @ bitWidth 2 (OSPEEDR14)  
        .equ GPIOA_OSPEEDR13_Shift, 26   @ bitWidth 2 (OSPEEDR13)  
        .equ GPIOA_OSPEEDR12_Shift, 24   @ bitWidth 2 (OSPEEDR12)  
        .equ GPIOA_OSPEEDR11_Shift, 22   @ bitWidth 2 (OSPEEDR11)  
        .equ GPIOA_OSPEEDR10_Shift, 20   @ bitWidth 2 (OSPEEDR10)  
        .equ GPIOA_OSPEEDR9_Shift, 18   @ bitWidth 2 (OSPEEDR9)  
        .equ GPIOA_OSPEEDR8_Shift, 16   @ bitWidth 2 (OSPEEDR8)  
        .equ GPIOA_OSPEEDR7_Shift, 14   @ bitWidth 2 (OSPEEDR7)  
        .equ GPIOA_OSPEEDR6_Shift, 12   @ bitWidth 2 (OSPEEDR6)  
        .equ GPIOA_OSPEEDR5_Shift, 10   @ bitWidth 2 (OSPEEDR5)  
        .equ GPIOA_OSPEEDR4_Shift, 8   @ bitWidth 2 (OSPEEDR4)  
        .equ GPIOA_OSPEEDR3_Shift, 6   @ bitWidth 2 (OSPEEDR3)  
        .equ GPIOA_OSPEEDR2_Shift, 4   @ bitWidth 2 (OSPEEDR2)  
        .equ GPIOA_OSPEEDR1_Shift, 2   @ bitWidth 2 (OSPEEDR1)  
        .equ GPIOA_OSPEEDR0_Shift, 0   @ bitWidth 2 (OSPEEDR0)  
 
    .equ GPIOA_PUPDR, GPIOA_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOA_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_IDR, GPIOA_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOA_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOA_ODR, GPIOA_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOA_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOA_BSRR, GPIOA_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOA_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOA_LCKR, GPIOA_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOA_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOA_AFRL, GPIOA_BASE + 0x20 @ (AFRL) 
        .equ GPIOA_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOA_AFRH, GPIOA_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOA_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOB ===========================@
.equ GPIOB_BASE, 0x40020400 @ (General-purpose I/Os) 
    .equ GPIOB_MODER, GPIOB_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOB_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_OTYPER, GPIOB_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOB_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_OSPEEDER, GPIOB_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOB_OSPEEDR15_Shift, 30   @ bitWidth 2 (OSPEEDR15)  
        .equ GPIOB_OSPEEDR14_Shift, 28   @ bitWidth 2 (OSPEEDR14)  
        .equ GPIOB_OSPEEDR13_Shift, 26   @ bitWidth 2 (OSPEEDR13)  
        .equ GPIOB_OSPEEDR12_Shift, 24   @ bitWidth 2 (OSPEEDR12)  
        .equ GPIOB_OSPEEDR11_Shift, 22   @ bitWidth 2 (OSPEEDR11)  
        .equ GPIOB_OSPEEDR10_Shift, 20   @ bitWidth 2 (OSPEEDR10)  
        .equ GPIOB_OSPEEDR9_Shift, 18   @ bitWidth 2 (OSPEEDR9)  
        .equ GPIOB_OSPEEDR8_Shift, 16   @ bitWidth 2 (OSPEEDR8)  
        .equ GPIOB_OSPEEDR7_Shift, 14   @ bitWidth 2 (OSPEEDR7)  
        .equ GPIOB_OSPEEDR6_Shift, 12   @ bitWidth 2 (OSPEEDR6)  
        .equ GPIOB_OSPEEDR5_Shift, 10   @ bitWidth 2 (OSPEEDR5)  
        .equ GPIOB_OSPEEDR4_Shift, 8   @ bitWidth 2 (OSPEEDR4)  
        .equ GPIOB_OSPEEDR3_Shift, 6   @ bitWidth 2 (OSPEEDR3)  
        .equ GPIOB_OSPEEDR2_Shift, 4   @ bitWidth 2 (OSPEEDR2)  
        .equ GPIOB_OSPEEDR1_Shift, 2   @ bitWidth 2 (OSPEEDR1)  
        .equ GPIOB_OSPEEDR0_Shift, 0   @ bitWidth 2 (OSPEEDR0)  
 
    .equ GPIOB_PUPDR, GPIOB_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOB_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_IDR, GPIOB_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOB_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOB_ODR, GPIOB_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOB_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOB_BSRR, GPIOB_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOB_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOB_LCKR, GPIOB_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOB_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOB_AFRL, GPIOB_BASE + 0x20 @ (AFRL) 
        .equ GPIOB_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOB_AFRH, GPIOB_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOB_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOC ===========================@
.equ GPIOC_BASE, 0x40020800 @ (General-purpose I/Os) 
    .equ GPIOC_MODER, GPIOC_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOC_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_OTYPER, GPIOC_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOC_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_OSPEEDER, GPIOC_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOC_OSPEEDR15_Shift, 30   @ bitWidth 2 (OSPEEDR15)  
        .equ GPIOC_OSPEEDR14_Shift, 28   @ bitWidth 2 (OSPEEDR14)  
        .equ GPIOC_OSPEEDR13_Shift, 26   @ bitWidth 2 (OSPEEDR13)  
        .equ GPIOC_OSPEEDR12_Shift, 24   @ bitWidth 2 (OSPEEDR12)  
        .equ GPIOC_OSPEEDR11_Shift, 22   @ bitWidth 2 (OSPEEDR11)  
        .equ GPIOC_OSPEEDR10_Shift, 20   @ bitWidth 2 (OSPEEDR10)  
        .equ GPIOC_OSPEEDR9_Shift, 18   @ bitWidth 2 (OSPEEDR9)  
        .equ GPIOC_OSPEEDR8_Shift, 16   @ bitWidth 2 (OSPEEDR8)  
        .equ GPIOC_OSPEEDR7_Shift, 14   @ bitWidth 2 (OSPEEDR7)  
        .equ GPIOC_OSPEEDR6_Shift, 12   @ bitWidth 2 (OSPEEDR6)  
        .equ GPIOC_OSPEEDR5_Shift, 10   @ bitWidth 2 (OSPEEDR5)  
        .equ GPIOC_OSPEEDR4_Shift, 8   @ bitWidth 2 (OSPEEDR4)  
        .equ GPIOC_OSPEEDR3_Shift, 6   @ bitWidth 2 (OSPEEDR3)  
        .equ GPIOC_OSPEEDR2_Shift, 4   @ bitWidth 2 (OSPEEDR2)  
        .equ GPIOC_OSPEEDR1_Shift, 2   @ bitWidth 2 (OSPEEDR1)  
        .equ GPIOC_OSPEEDR0_Shift, 0   @ bitWidth 2 (OSPEEDR0)  
 
    .equ GPIOC_PUPDR, GPIOC_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOC_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_IDR, GPIOC_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOC_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOC_ODR, GPIOC_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOC_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOC_BSRR, GPIOC_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOC_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOC_LCKR, GPIOC_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOC_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOC_AFRL, GPIOC_BASE + 0x20 @ (AFRL) 
        .equ GPIOC_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOC_AFRH, GPIOC_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOC_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOD ===========================@
.equ GPIOD_BASE, 0x40020C00 @ (General-purpose I/Os) 
    .equ GPIOD_MODER, GPIOD_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOD_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_OTYPER, GPIOD_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOD_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_OSPEEDER, GPIOD_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOD_OSPEEDR15_Shift, 30   @ bitWidth 2 (OSPEEDR15)  
        .equ GPIOD_OSPEEDR14_Shift, 28   @ bitWidth 2 (OSPEEDR14)  
        .equ GPIOD_OSPEEDR13_Shift, 26   @ bitWidth 2 (OSPEEDR13)  
        .equ GPIOD_OSPEEDR12_Shift, 24   @ bitWidth 2 (OSPEEDR12)  
        .equ GPIOD_OSPEEDR11_Shift, 22   @ bitWidth 2 (OSPEEDR11)  
        .equ GPIOD_OSPEEDR10_Shift, 20   @ bitWidth 2 (OSPEEDR10)  
        .equ GPIOD_OSPEEDR9_Shift, 18   @ bitWidth 2 (OSPEEDR9)  
        .equ GPIOD_OSPEEDR8_Shift, 16   @ bitWidth 2 (OSPEEDR8)  
        .equ GPIOD_OSPEEDR7_Shift, 14   @ bitWidth 2 (OSPEEDR7)  
        .equ GPIOD_OSPEEDR6_Shift, 12   @ bitWidth 2 (OSPEEDR6)  
        .equ GPIOD_OSPEEDR5_Shift, 10   @ bitWidth 2 (OSPEEDR5)  
        .equ GPIOD_OSPEEDR4_Shift, 8   @ bitWidth 2 (OSPEEDR4)  
        .equ GPIOD_OSPEEDR3_Shift, 6   @ bitWidth 2 (OSPEEDR3)  
        .equ GPIOD_OSPEEDR2_Shift, 4   @ bitWidth 2 (OSPEEDR2)  
        .equ GPIOD_OSPEEDR1_Shift, 2   @ bitWidth 2 (OSPEEDR1)  
        .equ GPIOD_OSPEEDR0_Shift, 0   @ bitWidth 2 (OSPEEDR0)  
 
    .equ GPIOD_PUPDR, GPIOD_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOD_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_IDR, GPIOD_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOD_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOD_ODR, GPIOD_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOD_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOD_BSRR, GPIOD_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOD_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOD_LCKR, GPIOD_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOD_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOD_AFRL, GPIOD_BASE + 0x20 @ (AFRL) 
        .equ GPIOD_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOD_AFRH, GPIOD_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOD_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOE ===========================@
.equ GPIOE_BASE, 0x40021000 @ (General-purpose I/Os) 
    .equ GPIOE_MODER, GPIOE_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOE_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_OTYPER, GPIOE_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOE_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_OSPEEDER, GPIOE_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOE_OSPEEDR15_Shift, 30   @ bitWidth 2 (OSPEEDR15)  
        .equ GPIOE_OSPEEDR14_Shift, 28   @ bitWidth 2 (OSPEEDR14)  
        .equ GPIOE_OSPEEDR13_Shift, 26   @ bitWidth 2 (OSPEEDR13)  
        .equ GPIOE_OSPEEDR12_Shift, 24   @ bitWidth 2 (OSPEEDR12)  
        .equ GPIOE_OSPEEDR11_Shift, 22   @ bitWidth 2 (OSPEEDR11)  
        .equ GPIOE_OSPEEDR10_Shift, 20   @ bitWidth 2 (OSPEEDR10)  
        .equ GPIOE_OSPEEDR9_Shift, 18   @ bitWidth 2 (OSPEEDR9)  
        .equ GPIOE_OSPEEDR8_Shift, 16   @ bitWidth 2 (OSPEEDR8)  
        .equ GPIOE_OSPEEDR7_Shift, 14   @ bitWidth 2 (OSPEEDR7)  
        .equ GPIOE_OSPEEDR6_Shift, 12   @ bitWidth 2 (OSPEEDR6)  
        .equ GPIOE_OSPEEDR5_Shift, 10   @ bitWidth 2 (OSPEEDR5)  
        .equ GPIOE_OSPEEDR4_Shift, 8   @ bitWidth 2 (OSPEEDR4)  
        .equ GPIOE_OSPEEDR3_Shift, 6   @ bitWidth 2 (OSPEEDR3)  
        .equ GPIOE_OSPEEDR2_Shift, 4   @ bitWidth 2 (OSPEEDR2)  
        .equ GPIOE_OSPEEDR1_Shift, 2   @ bitWidth 2 (OSPEEDR1)  
        .equ GPIOE_OSPEEDR0_Shift, 0   @ bitWidth 2 (OSPEEDR0)  
 
    .equ GPIOE_PUPDR, GPIOE_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOE_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_IDR, GPIOE_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOE_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOE_ODR, GPIOE_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOE_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOE_BSRR, GPIOE_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOE_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOE_LCKR, GPIOE_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOE_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOE_AFRL, GPIOE_BASE + 0x20 @ (AFRL) 
        .equ GPIOE_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOE_AFRH, GPIOE_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOE_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOF ===========================@
.equ GPIOF_BASE, 0x40021800 @ (General-purpose I/Os) 
    .equ GPIOF_MODER, GPIOF_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOF_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_OTYPER, GPIOF_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOF_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_OSPEEDER, GPIOF_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOF_OSPEEDR15_Shift, 30   @ bitWidth 2 (OSPEEDR15)  
        .equ GPIOF_OSPEEDR14_Shift, 28   @ bitWidth 2 (OSPEEDR14)  
        .equ GPIOF_OSPEEDR13_Shift, 26   @ bitWidth 2 (OSPEEDR13)  
        .equ GPIOF_OSPEEDR12_Shift, 24   @ bitWidth 2 (OSPEEDR12)  
        .equ GPIOF_OSPEEDR11_Shift, 22   @ bitWidth 2 (OSPEEDR11)  
        .equ GPIOF_OSPEEDR10_Shift, 20   @ bitWidth 2 (OSPEEDR10)  
        .equ GPIOF_OSPEEDR9_Shift, 18   @ bitWidth 2 (OSPEEDR9)  
        .equ GPIOF_OSPEEDR8_Shift, 16   @ bitWidth 2 (OSPEEDR8)  
        .equ GPIOF_OSPEEDR7_Shift, 14   @ bitWidth 2 (OSPEEDR7)  
        .equ GPIOF_OSPEEDR6_Shift, 12   @ bitWidth 2 (OSPEEDR6)  
        .equ GPIOF_OSPEEDR5_Shift, 10   @ bitWidth 2 (OSPEEDR5)  
        .equ GPIOF_OSPEEDR4_Shift, 8   @ bitWidth 2 (OSPEEDR4)  
        .equ GPIOF_OSPEEDR3_Shift, 6   @ bitWidth 2 (OSPEEDR3)  
        .equ GPIOF_OSPEEDR2_Shift, 4   @ bitWidth 2 (OSPEEDR2)  
        .equ GPIOF_OSPEEDR1_Shift, 2   @ bitWidth 2 (OSPEEDR1)  
        .equ GPIOF_OSPEEDR0_Shift, 0   @ bitWidth 2 (OSPEEDR0)  
 
    .equ GPIOF_PUPDR, GPIOF_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOF_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_IDR, GPIOF_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOF_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOF_ODR, GPIOF_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOF_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOF_BSRR, GPIOF_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOF_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOF_LCKR, GPIOF_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOF_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOF_AFRL, GPIOF_BASE + 0x20 @ (AFRL) 
        .equ GPIOF_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOF_AFRH, GPIOF_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOF_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOG ===========================@
.equ GPIOG_BASE, 0x40021C00 @ (General-purpose I/Os) 
    .equ GPIOG_MODER, GPIOG_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOG_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_OTYPER, GPIOG_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOG_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_OSPEEDER, GPIOG_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOG_OSPEEDR15_Shift, 30   @ bitWidth 2 (OSPEEDR15)  
        .equ GPIOG_OSPEEDR14_Shift, 28   @ bitWidth 2 (OSPEEDR14)  
        .equ GPIOG_OSPEEDR13_Shift, 26   @ bitWidth 2 (OSPEEDR13)  
        .equ GPIOG_OSPEEDR12_Shift, 24   @ bitWidth 2 (OSPEEDR12)  
        .equ GPIOG_OSPEEDR11_Shift, 22   @ bitWidth 2 (OSPEEDR11)  
        .equ GPIOG_OSPEEDR10_Shift, 20   @ bitWidth 2 (OSPEEDR10)  
        .equ GPIOG_OSPEEDR9_Shift, 18   @ bitWidth 2 (OSPEEDR9)  
        .equ GPIOG_OSPEEDR8_Shift, 16   @ bitWidth 2 (OSPEEDR8)  
        .equ GPIOG_OSPEEDR7_Shift, 14   @ bitWidth 2 (OSPEEDR7)  
        .equ GPIOG_OSPEEDR6_Shift, 12   @ bitWidth 2 (OSPEEDR6)  
        .equ GPIOG_OSPEEDR5_Shift, 10   @ bitWidth 2 (OSPEEDR5)  
        .equ GPIOG_OSPEEDR4_Shift, 8   @ bitWidth 2 (OSPEEDR4)  
        .equ GPIOG_OSPEEDR3_Shift, 6   @ bitWidth 2 (OSPEEDR3)  
        .equ GPIOG_OSPEEDR2_Shift, 4   @ bitWidth 2 (OSPEEDR2)  
        .equ GPIOG_OSPEEDR1_Shift, 2   @ bitWidth 2 (OSPEEDR1)  
        .equ GPIOG_OSPEEDR0_Shift, 0   @ bitWidth 2 (OSPEEDR0)  
 
    .equ GPIOG_PUPDR, GPIOG_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOG_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_IDR, GPIOG_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOG_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOG_ODR, GPIOG_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOG_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOG_BSRR, GPIOG_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOG_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOG_LCKR, GPIOG_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOG_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOG_AFRL, GPIOG_BASE + 0x20 @ (AFRL) 
        .equ GPIOG_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOG_AFRH, GPIOG_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOG_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOH ===========================@
.equ GPIOH_BASE, 0x40021400 @ (General-purpose I/Os) 
    .equ GPIOH_MODER, GPIOH_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOH_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_OTYPER, GPIOH_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOH_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_OSPEEDER, GPIOH_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOH_OSPEEDR15_Shift, 30   @ bitWidth 2 (OSPEEDR15)  
        .equ GPIOH_OSPEEDR14_Shift, 28   @ bitWidth 2 (OSPEEDR14)  
        .equ GPIOH_OSPEEDR13_Shift, 26   @ bitWidth 2 (OSPEEDR13)  
        .equ GPIOH_OSPEEDR12_Shift, 24   @ bitWidth 2 (OSPEEDR12)  
        .equ GPIOH_OSPEEDR11_Shift, 22   @ bitWidth 2 (OSPEEDR11)  
        .equ GPIOH_OSPEEDR10_Shift, 20   @ bitWidth 2 (OSPEEDR10)  
        .equ GPIOH_OSPEEDR9_Shift, 18   @ bitWidth 2 (OSPEEDR9)  
        .equ GPIOH_OSPEEDR8_Shift, 16   @ bitWidth 2 (OSPEEDR8)  
        .equ GPIOH_OSPEEDR7_Shift, 14   @ bitWidth 2 (OSPEEDR7)  
        .equ GPIOH_OSPEEDR6_Shift, 12   @ bitWidth 2 (OSPEEDR6)  
        .equ GPIOH_OSPEEDR5_Shift, 10   @ bitWidth 2 (OSPEEDR5)  
        .equ GPIOH_OSPEEDR4_Shift, 8   @ bitWidth 2 (OSPEEDR4)  
        .equ GPIOH_OSPEEDR3_Shift, 6   @ bitWidth 2 (OSPEEDR3)  
        .equ GPIOH_OSPEEDR2_Shift, 4   @ bitWidth 2 (OSPEEDR2)  
        .equ GPIOH_OSPEEDR1_Shift, 2   @ bitWidth 2 (OSPEEDR1)  
        .equ GPIOH_OSPEEDR0_Shift, 0   @ bitWidth 2 (OSPEEDR0)  
 
    .equ GPIOH_PUPDR, GPIOH_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOH_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_IDR, GPIOH_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOH_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOH_ODR, GPIOH_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOH_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOH_BSRR, GPIOH_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOH_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOH_LCKR, GPIOH_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOH_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOH_AFRL, GPIOH_BASE + 0x20 @ (AFRL) 
        .equ GPIOH_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOH_AFRH, GPIOH_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== I2C1 ===========================@
.equ I2C1_BASE, 0x40005400 @ (Inter-integrated circuit) 
    .equ I2C1_CR1, I2C1_BASE + 0x0 @ (CR1) 
        .equ I2C1_SWRST_Shift, 15   @ bitWidth 1 (Software reset)  
        .equ I2C1_ALERT_Shift, 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C1_PEC_Shift, 12   @ bitWidth 1 (Packet error checking)  
        .equ I2C1_POS_Shift, 11   @ bitWidth 1 (Acknowledge/PEC Position for data  reception)  
        .equ I2C1_ACK_Shift, 10   @ bitWidth 1 (Acknowledge enable)  
        .equ I2C1_STOP_Shift, 9   @ bitWidth 1 (Stop generation)  
        .equ I2C1_START_Shift, 8   @ bitWidth 1 (Start generation)  
        .equ I2C1_NOSTRETCH_Shift, 7   @ bitWidth 1 (Clock stretching disable Slave  mode)  
        .equ I2C1_ENGC_Shift, 6   @ bitWidth 1 (General call enable)  
        .equ I2C1_ENPEC_Shift, 5   @ bitWidth 1 (PEC enable)  
        .equ I2C1_ENARP_Shift, 4   @ bitWidth 1 (ARP enable)  
        .equ I2C1_SMBTYPE_Shift, 3   @ bitWidth 1 (SMBus type)  
        .equ I2C1_SMBUS_Shift, 1   @ bitWidth 1 (SMBus mode)  
        .equ I2C1_PE_Shift, 0   @ bitWidth 1 (Peripheral enable)  
 
    .equ I2C1_CR2, I2C1_BASE + 0x4 @ (CR2) 
        .equ I2C1_LAST_Shift, 12   @ bitWidth 1 (DMA last transfer)  
        .equ I2C1_DMAEN_Shift, 11   @ bitWidth 1 (DMA requests enable)  
        .equ I2C1_ITBUFEN_Shift, 10   @ bitWidth 1 (Buffer interrupt enable)  
        .equ I2C1_ITEVTEN_Shift, 9   @ bitWidth 1 (Event interrupt enable)  
        .equ I2C1_ITERREN_Shift, 8   @ bitWidth 1 (Error interrupt enable)  
        .equ I2C1_FREQ_Shift, 0   @ bitWidth 6 (Peripheral clock frequency)  
 
    .equ I2C1_OAR1, I2C1_BASE + 0x8 @ (OAR1) 
        .equ I2C1_ADDMODE_Shift, 15   @ bitWidth 1 (ADDMODE)  
        .equ I2C1_ADD_8_9_Shift, 8   @ bitWidth 2 (Interface address)  
        .equ I2C1_ADD_1_7_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_ADD_0_Shift, 0   @ bitWidth 1 (Interface address)  
 
    .equ I2C1_OAR2, I2C1_BASE + 0xC @ (OAR2) 
        .equ I2C1_ADD2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_ENDUAL_Shift, 0   @ bitWidth 1 (Dual addressing mode  enable)  
 
    .equ I2C1_DR, I2C1_BASE + 0x10 @ (DR) 
        .equ I2C1_DR_Shift, 0   @ bitWidth 8 (-bit data register)  
 
    .equ I2C1_SR1, I2C1_BASE + 0x14 @ (SR1) 
        .equ I2C1_SMBALERT_Shift, 15   @ bitWidth 1 (SMBus alert)  
        .equ I2C1_TIMEOUT_Shift, 14   @ bitWidth 1 (Timeout or Tlow error)  
        .equ I2C1_PECERR_Shift, 12   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C1_OVR_Shift, 11   @ bitWidth 1 (Overrun/Underrun)  
        .equ I2C1_AF_Shift, 10   @ bitWidth 1 (Acknowledge failure)  
        .equ I2C1_ARLO_Shift, 9   @ bitWidth 1 (Arbitration lost master  mode)  
        .equ I2C1_BERR_Shift, 8   @ bitWidth 1 (Bus error)  
        .equ I2C1_TxE_Shift, 7   @ bitWidth 1 (Data register empty  transmitters)  
        .equ I2C1_RxNE_Shift, 6   @ bitWidth 1 (Data register not empty  receivers)  
        .equ I2C1_STOPF_Shift, 4   @ bitWidth 1 (Stop detection slave  mode)  
        .equ I2C1_ADD10_Shift, 3   @ bitWidth 1 (10-bit header sent Master  mode)  
        .equ I2C1_BTF_Shift, 2   @ bitWidth 1 (Byte transfer finished)  
        .equ I2C1_ADDR_Shift, 1   @ bitWidth 1 (Address sent master mode/matched  slave mode)  
        .equ I2C1_SB_Shift, 0   @ bitWidth 1 (Start bit Master mode)  
 
    .equ I2C1_SR2, I2C1_BASE + 0x18 @ (SR2) 
        .equ I2C1_PEC_Shift, 8   @ bitWidth 8 (acket error checking  register)  
        .equ I2C1_DUALF_Shift, 7   @ bitWidth 1 (Dual flag Slave mode)  
        .equ I2C1_SMBHOST_Shift, 6   @ bitWidth 1 (SMBus host header Slave  mode)  
        .equ I2C1_SMBDEFAULT_Shift, 5   @ bitWidth 1 (SMBus device default address Slave  mode)  
        .equ I2C1_GENCALL_Shift, 4   @ bitWidth 1 (General call address Slave  mode)  
        .equ I2C1_TRA_Shift, 2   @ bitWidth 1 (Transmitter/receiver)  
        .equ I2C1_BUSY_Shift, 1   @ bitWidth 1 (Bus busy)  
        .equ I2C1_MSL_Shift, 0   @ bitWidth 1 (Master/slave)  
 
    .equ I2C1_CCR, I2C1_BASE + 0x1C @ (CCR) 
        .equ I2C1_F_S_Shift, 15   @ bitWidth 1 (I2C master mode selection)  
        .equ I2C1_DUTY_Shift, 14   @ bitWidth 1 (Fast mode duty cycle)  
        .equ I2C1_CCR_Shift, 0   @ bitWidth 12 (Clock control register in Fast/Standard  mode Master mode)  
 
    .equ I2C1_TRISE, I2C1_BASE + 0x20 @ (TRISE) 
        .equ I2C1_TRISE_Shift, 0   @ bitWidth 6 (Maximum rise time in Fast/Standard mode  Master mode)  
 

@=========================== I2C2 ===========================@
.equ I2C2_BASE, 0x40005800 @ (Inter-integrated circuit) 
    .equ I2C2_CR1, I2C2_BASE + 0x0 @ (CR1) 
        .equ I2C2_SWRST_Shift, 15   @ bitWidth 1 (Software reset)  
        .equ I2C2_ALERT_Shift, 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C2_PEC_Shift, 12   @ bitWidth 1 (Packet error checking)  
        .equ I2C2_POS_Shift, 11   @ bitWidth 1 (Acknowledge/PEC Position for data  reception)  
        .equ I2C2_ACK_Shift, 10   @ bitWidth 1 (Acknowledge enable)  
        .equ I2C2_STOP_Shift, 9   @ bitWidth 1 (Stop generation)  
        .equ I2C2_START_Shift, 8   @ bitWidth 1 (Start generation)  
        .equ I2C2_NOSTRETCH_Shift, 7   @ bitWidth 1 (Clock stretching disable Slave  mode)  
        .equ I2C2_ENGC_Shift, 6   @ bitWidth 1 (General call enable)  
        .equ I2C2_ENPEC_Shift, 5   @ bitWidth 1 (PEC enable)  
        .equ I2C2_ENARP_Shift, 4   @ bitWidth 1 (ARP enable)  
        .equ I2C2_SMBTYPE_Shift, 3   @ bitWidth 1 (SMBus type)  
        .equ I2C2_SMBUS_Shift, 1   @ bitWidth 1 (SMBus mode)  
        .equ I2C2_PE_Shift, 0   @ bitWidth 1 (Peripheral enable)  
 
    .equ I2C2_CR2, I2C2_BASE + 0x4 @ (CR2) 
        .equ I2C2_LAST_Shift, 12   @ bitWidth 1 (DMA last transfer)  
        .equ I2C2_DMAEN_Shift, 11   @ bitWidth 1 (DMA requests enable)  
        .equ I2C2_ITBUFEN_Shift, 10   @ bitWidth 1 (Buffer interrupt enable)  
        .equ I2C2_ITEVTEN_Shift, 9   @ bitWidth 1 (Event interrupt enable)  
        .equ I2C2_ITERREN_Shift, 8   @ bitWidth 1 (Error interrupt enable)  
        .equ I2C2_FREQ_Shift, 0   @ bitWidth 6 (Peripheral clock frequency)  
 
    .equ I2C2_OAR1, I2C2_BASE + 0x8 @ (OAR1) 
        .equ I2C2_ADDMODE_Shift, 15   @ bitWidth 1 (ADDMODE)  
        .equ I2C2_ADD_8_9_Shift, 8   @ bitWidth 2 (Interface address)  
        .equ I2C2_ADD_1_7_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_ADD_0_Shift, 0   @ bitWidth 1 (Interface address)  
 
    .equ I2C2_OAR2, I2C2_BASE + 0xC @ (OAR2) 
        .equ I2C2_ADD2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_ENDUAL_Shift, 0   @ bitWidth 1 (Dual addressing mode  enable)  
 
    .equ I2C2_DR, I2C2_BASE + 0x10 @ (DR) 
        .equ I2C2_DR_Shift, 0   @ bitWidth 8 (-bit data register)  
 
    .equ I2C2_SR1, I2C2_BASE + 0x14 @ (SR1) 
        .equ I2C2_SMBALERT_Shift, 15   @ bitWidth 1 (SMBus alert)  
        .equ I2C2_TIMEOUT_Shift, 14   @ bitWidth 1 (Timeout or Tlow error)  
        .equ I2C2_PECERR_Shift, 12   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C2_OVR_Shift, 11   @ bitWidth 1 (Overrun/Underrun)  
        .equ I2C2_AF_Shift, 10   @ bitWidth 1 (Acknowledge failure)  
        .equ I2C2_ARLO_Shift, 9   @ bitWidth 1 (Arbitration lost master  mode)  
        .equ I2C2_BERR_Shift, 8   @ bitWidth 1 (Bus error)  
        .equ I2C2_TxE_Shift, 7   @ bitWidth 1 (Data register empty  transmitters)  
        .equ I2C2_RxNE_Shift, 6   @ bitWidth 1 (Data register not empty  receivers)  
        .equ I2C2_STOPF_Shift, 4   @ bitWidth 1 (Stop detection slave  mode)  
        .equ I2C2_ADD10_Shift, 3   @ bitWidth 1 (10-bit header sent Master  mode)  
        .equ I2C2_BTF_Shift, 2   @ bitWidth 1 (Byte transfer finished)  
        .equ I2C2_ADDR_Shift, 1   @ bitWidth 1 (Address sent master mode/matched  slave mode)  
        .equ I2C2_SB_Shift, 0   @ bitWidth 1 (Start bit Master mode)  
 
    .equ I2C2_SR2, I2C2_BASE + 0x18 @ (SR2) 
        .equ I2C2_PEC_Shift, 8   @ bitWidth 8 (acket error checking  register)  
        .equ I2C2_DUALF_Shift, 7   @ bitWidth 1 (Dual flag Slave mode)  
        .equ I2C2_SMBHOST_Shift, 6   @ bitWidth 1 (SMBus host header Slave  mode)  
        .equ I2C2_SMBDEFAULT_Shift, 5   @ bitWidth 1 (SMBus device default address Slave  mode)  
        .equ I2C2_GENCALL_Shift, 4   @ bitWidth 1 (General call address Slave  mode)  
        .equ I2C2_TRA_Shift, 2   @ bitWidth 1 (Transmitter/receiver)  
        .equ I2C2_BUSY_Shift, 1   @ bitWidth 1 (Bus busy)  
        .equ I2C2_MSL_Shift, 0   @ bitWidth 1 (Master/slave)  
 
    .equ I2C2_CCR, I2C2_BASE + 0x1C @ (CCR) 
        .equ I2C2_F_S_Shift, 15   @ bitWidth 1 (I2C master mode selection)  
        .equ I2C2_DUTY_Shift, 14   @ bitWidth 1 (Fast mode duty cycle)  
        .equ I2C2_CCR_Shift, 0   @ bitWidth 12 (Clock control register in Fast/Standard  mode Master mode)  
 
    .equ I2C2_TRISE, I2C2_BASE + 0x20 @ (TRISE) 
        .equ I2C2_TRISE_Shift, 0   @ bitWidth 6 (Maximum rise time in Fast/Standard mode  Master mode)  
 

@=========================== IWDG ===========================@
.equ IWDG_BASE, 0x40003000 @ (Independent watchdog) 
    .equ IWDG_KR, IWDG_BASE + 0x0 @ (Key register) 
        .equ IWDG_KEY_Shift, 0   @ bitWidth 16 (Key value write only, read  0000h)  
 
    .equ IWDG_PR, IWDG_BASE + 0x4 @ (Prescaler register) 
        .equ IWDG_PR_Shift, 0   @ bitWidth 3 (Prescaler divider)  
 
    .equ IWDG_RLR, IWDG_BASE + 0x8 @ (Reload register) 
        .equ IWDG_RL_Shift, 0   @ bitWidth 12 (Watchdog counter reload  value)  
 
    .equ IWDG_SR, IWDG_BASE + 0xC @ (Status register) 
        .equ IWDG_RVU_Shift, 1   @ bitWidth 1 (Watchdog counter reload value  update)  
        .equ IWDG_PVU_Shift, 0   @ bitWidth 1 (Watchdog prescaler value  update)  
 

@=========================== LCD ===========================@
.equ LCD_BASE, 0x40002400 @ (Liquid crystal display controller) 
    .equ LCD_CR, LCD_BASE + 0x0 @ (control register) 
        .equ LCD_MUX_SEG_Shift, 7   @ bitWidth 1 (Mux segment enable)  
        .equ LCD_BIAS_Shift, 5   @ bitWidth 2 (Bias selector)  
        .equ LCD_DUTY_Shift, 2   @ bitWidth 3 (Duty selection)  
        .equ LCD_VSEL_Shift, 1   @ bitWidth 1 (Voltage source selection)  
        .equ LCD_LCDEN_Shift, 0   @ bitWidth 1 (LCD controller enable)  
 
    .equ LCD_FCR, LCD_BASE + 0x4 @ (frame control register) 
        .equ LCD_PS_Shift, 22   @ bitWidth 4 (PS 16-bit prescaler)  
        .equ LCD_DIV_Shift, 18   @ bitWidth 4 (DIV clock divider)  
        .equ LCD_BLINK_Shift, 16   @ bitWidth 2 (Blink mode selection)  
        .equ LCD_BLINKF_Shift, 13   @ bitWidth 3 (Blink frequency selection)  
        .equ LCD_CC_Shift, 10   @ bitWidth 3 (Contrast control)  
        .equ LCD_DEAD_Shift, 7   @ bitWidth 3 (Dead time duration)  
        .equ LCD_PON_Shift, 4   @ bitWidth 3 (Pulse ON duration)  
        .equ LCD_UDDIE_Shift, 3   @ bitWidth 1 (Update display done interrupt  enable)  
        .equ LCD_SOFIE_Shift, 1   @ bitWidth 1 (Start of frame interrupt  enable)  
        .equ LCD_HD_Shift, 0   @ bitWidth 1 (High drive enable)  
 
    .equ LCD_SR, LCD_BASE + 0x8 @ (status register) 
        .equ LCD_FCRSF_Shift, 5   @ bitWidth 1 (LCD Frame Control Register  Synchronization flag)  
        .equ LCD_RDY_Shift, 4   @ bitWidth 1 (Ready flag)  
        .equ LCD_UDD_Shift, 3   @ bitWidth 1 (Update Display Done)  
        .equ LCD_UDR_Shift, 2   @ bitWidth 1 (Update display request)  
        .equ LCD_SOF_Shift, 1   @ bitWidth 1 (Start of frame flag)  
        .equ LCD_ENS_Shift, 0   @ bitWidth 1 (LCD enabled status)  
 
    .equ LCD_CLR, LCD_BASE + 0xC @ (clear register) 
        .equ LCD_UDDC_Shift, 3   @ bitWidth 1 (Update display done clear)  
        .equ LCD_SOFC_Shift, 1   @ bitWidth 1 (Start of frame flag clear)  
 
    .equ LCD_RAM_COM0, LCD_BASE + 0x14 @ (display memory) 
        .equ LCD_S31_Shift, 31   @ bitWidth 1 (S31)  
        .equ LCD_S30_Shift, 30   @ bitWidth 1 (S30)  
        .equ LCD_S29_Shift, 29   @ bitWidth 1 (S29)  
        .equ LCD_S28_Shift, 28   @ bitWidth 1 (S28)  
        .equ LCD_S27_Shift, 27   @ bitWidth 1 (S27)  
        .equ LCD_S26_Shift, 26   @ bitWidth 1 (S26)  
        .equ LCD_S25_Shift, 25   @ bitWidth 1 (S25)  
        .equ LCD_S24_Shift, 24   @ bitWidth 1 (S24)  
        .equ LCD_S23_Shift, 23   @ bitWidth 1 (S23)  
        .equ LCD_S22_Shift, 22   @ bitWidth 1 (S22)  
        .equ LCD_S21_Shift, 21   @ bitWidth 1 (S21)  
        .equ LCD_S20_Shift, 20   @ bitWidth 1 (S20)  
        .equ LCD_S19_Shift, 19   @ bitWidth 1 (S19)  
        .equ LCD_S18_Shift, 18   @ bitWidth 1 (S18)  
        .equ LCD_S17_Shift, 17   @ bitWidth 1 (S17)  
        .equ LCD_S16_Shift, 16   @ bitWidth 1 (S16)  
        .equ LCD_S15_Shift, 15   @ bitWidth 1 (S15)  
        .equ LCD_S14_Shift, 14   @ bitWidth 1 (S14)  
        .equ LCD_S13_Shift, 13   @ bitWidth 1 (S13)  
        .equ LCD_S12_Shift, 12   @ bitWidth 1 (S12)  
        .equ LCD_S11_Shift, 11   @ bitWidth 1 (S11)  
        .equ LCD_S10_Shift, 10   @ bitWidth 1 (S10)  
        .equ LCD_S09_Shift, 9   @ bitWidth 1 (S09)  
        .equ LCD_S08_Shift, 8   @ bitWidth 1 (S08)  
        .equ LCD_S07_Shift, 7   @ bitWidth 1 (S07)  
        .equ LCD_S06_Shift, 6   @ bitWidth 1 (S06)  
        .equ LCD_S05_Shift, 5   @ bitWidth 1 (S05)  
        .equ LCD_S04_Shift, 4   @ bitWidth 1 (S04)  
        .equ LCD_S03_Shift, 3   @ bitWidth 1 (S03)  
        .equ LCD_S02_Shift, 2   @ bitWidth 1 (S02)  
        .equ LCD_S01_Shift, 1   @ bitWidth 1 (S01)  
        .equ LCD_S00_Shift, 0   @ bitWidth 1 (S00)  
 
    .equ LCD_RAM_COM1, LCD_BASE + 0x1C @ (display memory) 
        .equ LCD_S31_Shift, 31   @ bitWidth 1 (S31)  
        .equ LCD_S30_Shift, 30   @ bitWidth 1 (S30)  
        .equ LCD_S29_Shift, 29   @ bitWidth 1 (S29)  
        .equ LCD_S28_Shift, 28   @ bitWidth 1 (S28)  
        .equ LCD_S27_Shift, 27   @ bitWidth 1 (S27)  
        .equ LCD_S26_Shift, 26   @ bitWidth 1 (S26)  
        .equ LCD_S25_Shift, 25   @ bitWidth 1 (S25)  
        .equ LCD_S24_Shift, 24   @ bitWidth 1 (S24)  
        .equ LCD_S23_Shift, 23   @ bitWidth 1 (S23)  
        .equ LCD_S22_Shift, 22   @ bitWidth 1 (S22)  
        .equ LCD_S21_Shift, 21   @ bitWidth 1 (S21)  
        .equ LCD_S20_Shift, 20   @ bitWidth 1 (S20)  
        .equ LCD_S19_Shift, 19   @ bitWidth 1 (S19)  
        .equ LCD_S18_Shift, 18   @ bitWidth 1 (S18)  
        .equ LCD_S17_Shift, 17   @ bitWidth 1 (S17)  
        .equ LCD_S16_Shift, 16   @ bitWidth 1 (S16)  
        .equ LCD_S15_Shift, 15   @ bitWidth 1 (S15)  
        .equ LCD_S14_Shift, 14   @ bitWidth 1 (S14)  
        .equ LCD_S13_Shift, 13   @ bitWidth 1 (S13)  
        .equ LCD_S12_Shift, 12   @ bitWidth 1 (S12)  
        .equ LCD_S11_Shift, 11   @ bitWidth 1 (S11)  
        .equ LCD_S10_Shift, 10   @ bitWidth 1 (S10)  
        .equ LCD_S09_Shift, 9   @ bitWidth 1 (S09)  
        .equ LCD_S08_Shift, 8   @ bitWidth 1 (S08)  
        .equ LCD_S07_Shift, 7   @ bitWidth 1 (S07)  
        .equ LCD_S06_Shift, 6   @ bitWidth 1 (S06)  
        .equ LCD_S05_Shift, 5   @ bitWidth 1 (S05)  
        .equ LCD_S04_Shift, 4   @ bitWidth 1 (S04)  
        .equ LCD_S03_Shift, 3   @ bitWidth 1 (S03)  
        .equ LCD_S02_Shift, 2   @ bitWidth 1 (S02)  
        .equ LCD_S01_Shift, 1   @ bitWidth 1 (S01)  
        .equ LCD_S00_Shift, 0   @ bitWidth 1 (S00)  
 
    .equ LCD_RAM_COM2, LCD_BASE + 0x24 @ (display memory) 
        .equ LCD_S31_Shift, 31   @ bitWidth 1 (S31)  
        .equ LCD_S30_Shift, 30   @ bitWidth 1 (S30)  
        .equ LCD_S29_Shift, 29   @ bitWidth 1 (S29)  
        .equ LCD_S28_Shift, 28   @ bitWidth 1 (S28)  
        .equ LCD_S27_Shift, 27   @ bitWidth 1 (S27)  
        .equ LCD_S26_Shift, 26   @ bitWidth 1 (S26)  
        .equ LCD_S25_Shift, 25   @ bitWidth 1 (S25)  
        .equ LCD_S24_Shift, 24   @ bitWidth 1 (S24)  
        .equ LCD_S23_Shift, 23   @ bitWidth 1 (S23)  
        .equ LCD_S22_Shift, 22   @ bitWidth 1 (S22)  
        .equ LCD_S21_Shift, 21   @ bitWidth 1 (S21)  
        .equ LCD_S20_Shift, 20   @ bitWidth 1 (S20)  
        .equ LCD_S19_Shift, 19   @ bitWidth 1 (S19)  
        .equ LCD_S18_Shift, 18   @ bitWidth 1 (S18)  
        .equ LCD_S17_Shift, 17   @ bitWidth 1 (S17)  
        .equ LCD_S16_Shift, 16   @ bitWidth 1 (S16)  
        .equ LCD_S15_Shift, 15   @ bitWidth 1 (S15)  
        .equ LCD_S14_Shift, 14   @ bitWidth 1 (S14)  
        .equ LCD_S13_Shift, 13   @ bitWidth 1 (S13)  
        .equ LCD_S12_Shift, 12   @ bitWidth 1 (S12)  
        .equ LCD_S11_Shift, 11   @ bitWidth 1 (S11)  
        .equ LCD_S10_Shift, 10   @ bitWidth 1 (S10)  
        .equ LCD_S09_Shift, 9   @ bitWidth 1 (S09)  
        .equ LCD_S08_Shift, 8   @ bitWidth 1 (S08)  
        .equ LCD_S07_Shift, 7   @ bitWidth 1 (S07)  
        .equ LCD_S06_Shift, 6   @ bitWidth 1 (S06)  
        .equ LCD_S05_Shift, 5   @ bitWidth 1 (S05)  
        .equ LCD_S04_Shift, 4   @ bitWidth 1 (S04)  
        .equ LCD_S03_Shift, 3   @ bitWidth 1 (S03)  
        .equ LCD_S02_Shift, 2   @ bitWidth 1 (S02)  
        .equ LCD_S01_Shift, 1   @ bitWidth 1 (S01)  
        .equ LCD_S00_Shift, 0   @ bitWidth 1 (S00)  
 
    .equ LCD_RAM_COM3, LCD_BASE + 0x2C @ (display memory) 
        .equ LCD_S31_Shift, 31   @ bitWidth 1 (S31)  
        .equ LCD_S30_Shift, 30   @ bitWidth 1 (S30)  
        .equ LCD_S29_Shift, 29   @ bitWidth 1 (S29)  
        .equ LCD_S28_Shift, 28   @ bitWidth 1 (S28)  
        .equ LCD_S27_Shift, 27   @ bitWidth 1 (S27)  
        .equ LCD_S26_Shift, 26   @ bitWidth 1 (S26)  
        .equ LCD_S25_Shift, 25   @ bitWidth 1 (S25)  
        .equ LCD_S24_Shift, 24   @ bitWidth 1 (S24)  
        .equ LCD_S23_Shift, 23   @ bitWidth 1 (S23)  
        .equ LCD_S22_Shift, 22   @ bitWidth 1 (S22)  
        .equ LCD_S21_Shift, 21   @ bitWidth 1 (S21)  
        .equ LCD_S20_Shift, 20   @ bitWidth 1 (S20)  
        .equ LCD_S19_Shift, 19   @ bitWidth 1 (S19)  
        .equ LCD_S18_Shift, 18   @ bitWidth 1 (S18)  
        .equ LCD_S17_Shift, 17   @ bitWidth 1 (S17)  
        .equ LCD_S16_Shift, 16   @ bitWidth 1 (S16)  
        .equ LCD_S15_Shift, 15   @ bitWidth 1 (S15)  
        .equ LCD_S14_Shift, 14   @ bitWidth 1 (S14)  
        .equ LCD_S13_Shift, 13   @ bitWidth 1 (S13)  
        .equ LCD_S12_Shift, 12   @ bitWidth 1 (S12)  
        .equ LCD_S11_Shift, 11   @ bitWidth 1 (S11)  
        .equ LCD_S10_Shift, 10   @ bitWidth 1 (S10)  
        .equ LCD_S09_Shift, 9   @ bitWidth 1 (S09)  
        .equ LCD_S08_Shift, 8   @ bitWidth 1 (S08)  
        .equ LCD_S07_Shift, 7   @ bitWidth 1 (S07)  
        .equ LCD_S06_Shift, 6   @ bitWidth 1 (S06)  
        .equ LCD_S05_Shift, 5   @ bitWidth 1 (S05)  
        .equ LCD_S04_Shift, 4   @ bitWidth 1 (S04)  
        .equ LCD_S03_Shift, 3   @ bitWidth 1 (S03)  
        .equ LCD_S02_Shift, 2   @ bitWidth 1 (S02)  
        .equ LCD_S01_Shift, 1   @ bitWidth 1 (S01)  
        .equ LCD_S00_Shift, 0   @ bitWidth 1 (S00)  
 
    .equ LCD_RAM_COM4, LCD_BASE + 0x34 @ (display memory) 
        .equ LCD_S31_Shift, 31   @ bitWidth 1 (S31)  
        .equ LCD_S30_Shift, 30   @ bitWidth 1 (S30)  
        .equ LCD_S29_Shift, 29   @ bitWidth 1 (S29)  
        .equ LCD_S28_Shift, 28   @ bitWidth 1 (S28)  
        .equ LCD_S27_Shift, 27   @ bitWidth 1 (S27)  
        .equ LCD_S26_Shift, 26   @ bitWidth 1 (S26)  
        .equ LCD_S25_Shift, 25   @ bitWidth 1 (S25)  
        .equ LCD_S24_Shift, 24   @ bitWidth 1 (S24)  
        .equ LCD_S23_Shift, 23   @ bitWidth 1 (S23)  
        .equ LCD_S22_Shift, 22   @ bitWidth 1 (S22)  
        .equ LCD_S21_Shift, 21   @ bitWidth 1 (S21)  
        .equ LCD_S20_Shift, 20   @ bitWidth 1 (S20)  
        .equ LCD_S19_Shift, 19   @ bitWidth 1 (S19)  
        .equ LCD_S18_Shift, 18   @ bitWidth 1 (S18)  
        .equ LCD_S17_Shift, 17   @ bitWidth 1 (S17)  
        .equ LCD_S16_Shift, 16   @ bitWidth 1 (S16)  
        .equ LCD_S15_Shift, 15   @ bitWidth 1 (S15)  
        .equ LCD_S14_Shift, 14   @ bitWidth 1 (S14)  
        .equ LCD_S13_Shift, 13   @ bitWidth 1 (S13)  
        .equ LCD_S12_Shift, 12   @ bitWidth 1 (S12)  
        .equ LCD_S11_Shift, 11   @ bitWidth 1 (S11)  
        .equ LCD_S10_Shift, 10   @ bitWidth 1 (S10)  
        .equ LCD_S09_Shift, 9   @ bitWidth 1 (S09)  
        .equ LCD_S08_Shift, 8   @ bitWidth 1 (S08)  
        .equ LCD_S07_Shift, 7   @ bitWidth 1 (S07)  
        .equ LCD_S06_Shift, 6   @ bitWidth 1 (S06)  
        .equ LCD_S05_Shift, 5   @ bitWidth 1 (S05)  
        .equ LCD_S04_Shift, 4   @ bitWidth 1 (S04)  
        .equ LCD_S03_Shift, 3   @ bitWidth 1 (S03)  
        .equ LCD_S02_Shift, 2   @ bitWidth 1 (S02)  
        .equ LCD_S01_Shift, 1   @ bitWidth 1 (S01)  
        .equ LCD_S00_Shift, 0   @ bitWidth 1 (S00)  
 
    .equ LCD_RAM_COM5, LCD_BASE + 0x3C @ (display memory) 
        .equ LCD_S31_Shift, 31   @ bitWidth 1 (S31)  
        .equ LCD_S30_Shift, 30   @ bitWidth 1 (S30)  
        .equ LCD_S29_Shift, 29   @ bitWidth 1 (S29)  
        .equ LCD_S28_Shift, 28   @ bitWidth 1 (S28)  
        .equ LCD_S27_Shift, 27   @ bitWidth 1 (S27)  
        .equ LCD_S26_Shift, 26   @ bitWidth 1 (S26)  
        .equ LCD_S25_Shift, 25   @ bitWidth 1 (S25)  
        .equ LCD_S24_Shift, 24   @ bitWidth 1 (S24)  
        .equ LCD_S23_Shift, 23   @ bitWidth 1 (S23)  
        .equ LCD_S22_Shift, 22   @ bitWidth 1 (S22)  
        .equ LCD_S21_Shift, 21   @ bitWidth 1 (S21)  
        .equ LCD_S20_Shift, 20   @ bitWidth 1 (S20)  
        .equ LCD_S19_Shift, 19   @ bitWidth 1 (S19)  
        .equ LCD_S18_Shift, 18   @ bitWidth 1 (S18)  
        .equ LCD_S17_Shift, 17   @ bitWidth 1 (S17)  
        .equ LCD_S16_Shift, 16   @ bitWidth 1 (S16)  
        .equ LCD_S15_Shift, 15   @ bitWidth 1 (S15)  
        .equ LCD_S14_Shift, 14   @ bitWidth 1 (S14)  
        .equ LCD_S13_Shift, 13   @ bitWidth 1 (S13)  
        .equ LCD_S12_Shift, 12   @ bitWidth 1 (S12)  
        .equ LCD_S11_Shift, 11   @ bitWidth 1 (S11)  
        .equ LCD_S10_Shift, 10   @ bitWidth 1 (S10)  
        .equ LCD_S09_Shift, 9   @ bitWidth 1 (S09)  
        .equ LCD_S08_Shift, 8   @ bitWidth 1 (S08)  
        .equ LCD_S07_Shift, 7   @ bitWidth 1 (S07)  
        .equ LCD_S06_Shift, 6   @ bitWidth 1 (S06)  
        .equ LCD_S05_Shift, 5   @ bitWidth 1 (S05)  
        .equ LCD_S04_Shift, 4   @ bitWidth 1 (S04)  
        .equ LCD_S03_Shift, 3   @ bitWidth 1 (S03)  
        .equ LCD_S02_Shift, 2   @ bitWidth 1 (S02)  
        .equ LCD_S01_Shift, 1   @ bitWidth 1 (S01)  
        .equ LCD_S00_Shift, 0   @ bitWidth 1 (S00)  
 
    .equ LCD_RAM_COM6, LCD_BASE + 0x44 @ (display memory) 
        .equ LCD_S31_Shift, 31   @ bitWidth 1 (S31)  
        .equ LCD_S30_Shift, 30   @ bitWidth 1 (S30)  
        .equ LCD_S29_Shift, 29   @ bitWidth 1 (S29)  
        .equ LCD_S28_Shift, 28   @ bitWidth 1 (S28)  
        .equ LCD_S27_Shift, 27   @ bitWidth 1 (S27)  
        .equ LCD_S26_Shift, 26   @ bitWidth 1 (S26)  
        .equ LCD_S25_Shift, 25   @ bitWidth 1 (S25)  
        .equ LCD_S24_Shift, 24   @ bitWidth 1 (S24)  
        .equ LCD_S23_Shift, 23   @ bitWidth 1 (S23)  
        .equ LCD_S22_Shift, 22   @ bitWidth 1 (S22)  
        .equ LCD_S21_Shift, 21   @ bitWidth 1 (S21)  
        .equ LCD_S20_Shift, 20   @ bitWidth 1 (S20)  
        .equ LCD_S19_Shift, 19   @ bitWidth 1 (S19)  
        .equ LCD_S18_Shift, 18   @ bitWidth 1 (S18)  
        .equ LCD_S17_Shift, 17   @ bitWidth 1 (S17)  
        .equ LCD_S16_Shift, 16   @ bitWidth 1 (S16)  
        .equ LCD_S15_Shift, 15   @ bitWidth 1 (S15)  
        .equ LCD_S14_Shift, 14   @ bitWidth 1 (S14)  
        .equ LCD_S13_Shift, 13   @ bitWidth 1 (S13)  
        .equ LCD_S12_Shift, 12   @ bitWidth 1 (S12)  
        .equ LCD_S11_Shift, 11   @ bitWidth 1 (S11)  
        .equ LCD_S10_Shift, 10   @ bitWidth 1 (S10)  
        .equ LCD_S09_Shift, 9   @ bitWidth 1 (S09)  
        .equ LCD_S08_Shift, 8   @ bitWidth 1 (S08)  
        .equ LCD_S07_Shift, 7   @ bitWidth 1 (S07)  
        .equ LCD_S06_Shift, 6   @ bitWidth 1 (S06)  
        .equ LCD_S05_Shift, 5   @ bitWidth 1 (S05)  
        .equ LCD_S04_Shift, 4   @ bitWidth 1 (S04)  
        .equ LCD_S03_Shift, 3   @ bitWidth 1 (S03)  
        .equ LCD_S02_Shift, 2   @ bitWidth 1 (S02)  
        .equ LCD_S01_Shift, 1   @ bitWidth 1 (S01)  
        .equ LCD_S00_Shift, 0   @ bitWidth 1 (S00)  
 
    .equ LCD_RAM_COM7, LCD_BASE + 0x4C @ (display memory) 
        .equ LCD_S31_Shift, 31   @ bitWidth 1 (S31)  
        .equ LCD_S30_Shift, 30   @ bitWidth 1 (S30)  
        .equ LCD_S29_Shift, 29   @ bitWidth 1 (S29)  
        .equ LCD_S28_Shift, 28   @ bitWidth 1 (S28)  
        .equ LCD_S27_Shift, 27   @ bitWidth 1 (S27)  
        .equ LCD_S26_Shift, 26   @ bitWidth 1 (S26)  
        .equ LCD_S25_Shift, 25   @ bitWidth 1 (S25)  
        .equ LCD_S24_Shift, 24   @ bitWidth 1 (S24)  
        .equ LCD_S23_Shift, 23   @ bitWidth 1 (S23)  
        .equ LCD_S22_Shift, 22   @ bitWidth 1 (S22)  
        .equ LCD_S21_Shift, 21   @ bitWidth 1 (S21)  
        .equ LCD_S20_Shift, 20   @ bitWidth 1 (S20)  
        .equ LCD_S19_Shift, 19   @ bitWidth 1 (S19)  
        .equ LCD_S18_Shift, 18   @ bitWidth 1 (S18)  
        .equ LCD_S17_Shift, 17   @ bitWidth 1 (S17)  
        .equ LCD_S16_Shift, 16   @ bitWidth 1 (S16)  
        .equ LCD_S15_Shift, 15   @ bitWidth 1 (S15)  
        .equ LCD_S14_Shift, 14   @ bitWidth 1 (S14)  
        .equ LCD_S13_Shift, 13   @ bitWidth 1 (S13)  
        .equ LCD_S12_Shift, 12   @ bitWidth 1 (S12)  
        .equ LCD_S11_Shift, 11   @ bitWidth 1 (S11)  
        .equ LCD_S10_Shift, 10   @ bitWidth 1 (S10)  
        .equ LCD_S09_Shift, 9   @ bitWidth 1 (S09)  
        .equ LCD_S08_Shift, 8   @ bitWidth 1 (S08)  
        .equ LCD_S07_Shift, 7   @ bitWidth 1 (S07)  
        .equ LCD_S06_Shift, 6   @ bitWidth 1 (S06)  
        .equ LCD_S05_Shift, 5   @ bitWidth 1 (S05)  
        .equ LCD_S04_Shift, 4   @ bitWidth 1 (S04)  
        .equ LCD_S03_Shift, 3   @ bitWidth 1 (S03)  
        .equ LCD_S02_Shift, 2   @ bitWidth 1 (S02)  
        .equ LCD_S01_Shift, 1   @ bitWidth 1 (S01)  
        .equ LCD_S00_Shift, 0   @ bitWidth 1 (S00)  
 

@=========================== OPAMP ===========================@
.equ OPAMP_BASE, 0x40007C5C @ (Operational amplifiers) 
    .equ OPAMP_CSR, OPAMP_BASE + 0x0 @ (control/status register) 
        .equ OPAMP_OPA3CALOUT_Shift, 31   @ bitWidth 1 (OPAMP3 calibration output)  
        .equ OPAMP_OPA2CALOUT_Shift, 30   @ bitWidth 1 (OPAMP2 calibration output)  
        .equ OPAMP_OPA1CALOUT_Shift, 29   @ bitWidth 1 (OPAMP1 calibration output)  
        .equ OPAMP_AOP_RANGE_Shift, 28   @ bitWidth 1 (Power range selection)  
        .equ OPAMP_S7SEL2_Shift, 27   @ bitWidth 1 (Switch 7 for OPAMP2 enable)  
        .equ OPAMP_ANAWSEL3_Shift, 26   @ bitWidth 1 (Switch SanA enable for  OPAMP3)  
        .equ OPAMP_ANAWSEL2_Shift, 25   @ bitWidth 1 (Switch SanA enable for  OPAMP2)  
        .equ OPAMP_ANAWSEL1_Shift, 24   @ bitWidth 1 (Switch SanA enable for  OPAMP1)  
        .equ OPAMP_OPA3LPM_Shift, 23   @ bitWidth 1 (OPAMP3 low power mode)  
        .equ OPAMP_OPA3CAL_H_Shift, 22   @ bitWidth 1 (OPAMP3 offset calibration for N  differential pair)  
        .equ OPAMP_OPA3CAL_L_Shift, 21   @ bitWidth 1 (OPAMP3 offset Calibration for P  differential pair)  
        .equ OPAMP_S6SEL3_Shift, 20   @ bitWidth 1 (Switch 6 for OPAMP3 enable)  
        .equ OPAMP_S5SEL3_Shift, 19   @ bitWidth 1 (Switch 5 for OPAMP3 enable)  
        .equ OPAMP_S4SEL3_Shift, 18   @ bitWidth 1 (Switch 4 for OPAMP3 enable)  
        .equ OPAMP_S3SEL3_Shift, 17   @ bitWidth 1 (Switch 3 for OPAMP3 Enable)  
        .equ OPAMP_OPA3PD_Shift, 16   @ bitWidth 1 (OPAMP3 power down)  
        .equ OPAMP_OPA2LPM_Shift, 15   @ bitWidth 1 (OPAMP2 low power mode)  
        .equ OPAMP_OPA2CAL_H_Shift, 14   @ bitWidth 1 (OPAMP2 offset calibration for N  differential pair)  
        .equ OPAMP_OPA2CAL_L_Shift, 13   @ bitWidth 1 (OPAMP2 offset Calibration for P  differential pair)  
        .equ OPAMP_S6SEL2_Shift, 12   @ bitWidth 1 (Switch 6 for OPAMP2 enable)  
        .equ OPAMP_S5SEL2_Shift, 11   @ bitWidth 1 (Switch 5 for OPAMP2 enable)  
        .equ OPAMP_S4SEL2_Shift, 10   @ bitWidth 1 (Switch 4 for OPAMP2 enable)  
        .equ OPAMP_S3SEL2_Shift, 9   @ bitWidth 1 (Switch 3 for OPAMP2 enable)  
        .equ OPAMP_OPA2PD_Shift, 8   @ bitWidth 1 (OPAMP2 power down)  
        .equ OPAMP_OPA1LPM_Shift, 7   @ bitWidth 1 (OPAMP1 low power mode)  
        .equ OPAMP_OPA1CAL_H_Shift, 6   @ bitWidth 1 (OPAMP1 offset calibration for N  differential pair)  
        .equ OPAMP_OPA1CAL_L_Shift, 5   @ bitWidth 1 (OPAMP1 offset calibration for P  differential pair)  
        .equ OPAMP_S6SEL1_Shift, 4   @ bitWidth 1 (Switch 6 for OPAMP1 enable)  
        .equ OPAMP_S5SEL1_Shift, 3   @ bitWidth 1 (Switch 5 for OPAMP1 enable)  
        .equ OPAMP_S4SEL1_Shift, 2   @ bitWidth 1 (Switch 4 for OPAMP1 enable)  
        .equ OPAMP_S3SEL1_Shift, 1   @ bitWidth 1 (Switch 3 for OPAMP1 enable)  
        .equ OPAMP_OPA1PD_Shift, 0   @ bitWidth 1 (OPAMP1 power down)  
 
    .equ OPAMP_OTR, OPAMP_BASE + 0x4 @ (offset trimming register for normal  mode) 
        .equ OPAMP_OT_USER_Shift, 31   @ bitWidth 1 (Select user or factory trimming  value)  
        .equ OPAMP_AO3_OPT_OFFSET_TRIM_Shift, 20   @ bitWidth 10 (OPAMP3, 10-bit offset trim value for  normal mode)  
        .equ OPAMP_AO2_OPT_OFFSET_TRIM_Shift, 10   @ bitWidth 10 (OPAMP2, 10-bit offset trim value for  normal mode)  
        .equ OPAMP_AO1_OPT_OFFSET_TRIM_Shift, 0   @ bitWidth 10 (OPAMP1, 10-bit offset trim value for  normal mode)  
 
    .equ OPAMP_LPOTR, OPAMP_BASE + 0x8 @ (OPAMP offset trimming register for low power  mode) 
        .equ OPAMP_AO3_OPT_OFFSET_TRIM_LP_Shift, 20   @ bitWidth 10 (OPAMP3, 10-bit offset trim value for low  power mode)  
        .equ OPAMP_AO2_OPT_OFFSET_TRIM_LP_Shift, 10   @ bitWidth 10 (OPAMP2, 10-bit offset trim value for low  power mode)  
        .equ OPAMP_AO1_OPT_OFFSET_TRIM_LP_Shift, 0   @ bitWidth 10 (OPAMP1, 10-bit offset trim value for low  power mode)  
 

@=========================== PWR ===========================@
.equ PWR_BASE, 0x40007000 @ (Power control) 
    .equ PWR_CR, PWR_BASE + 0x0 @ (power control register) 
        .equ PWR_LPRUN_Shift, 14   @ bitWidth 1 (Low power run mode)  
        .equ PWR_VOS_Shift, 11   @ bitWidth 2 (Voltage scaling range  selection)  
        .equ PWR_FWU_Shift, 10   @ bitWidth 1 (Fast wakeup)  
        .equ PWR_ULP_Shift, 9   @ bitWidth 1 (Ultralow power mode)  
        .equ PWR_DBP_Shift, 8   @ bitWidth 1 (Disable backup domain write  protection)  
        .equ PWR_PLS_Shift, 5   @ bitWidth 3 (PVD level selection)  
        .equ PWR_PVDE_Shift, 4   @ bitWidth 1 (Power voltage detector  enable)  
        .equ PWR_CSBF_Shift, 3   @ bitWidth 1 (Clear standby flag)  
        .equ PWR_CWUF_Shift, 2   @ bitWidth 1 (Clear wakeup flag)  
        .equ PWR_PDDS_Shift, 1   @ bitWidth 1 (Power down deepsleep)  
        .equ PWR_LPSDSR_Shift, 0   @ bitWidth 1 (Low-power deep sleep)  
 
    .equ PWR_CSR, PWR_BASE + 0x4 @ (power control/status register) 
        .equ PWR_EWUP3_Shift, 10   @ bitWidth 1 (Enable WKUP pin 3)  
        .equ PWR_EWUP2_Shift, 9   @ bitWidth 1 (Enable WKUP pin 2)  
        .equ PWR_EWUP1_Shift, 8   @ bitWidth 1 (Enable WKUP pin 1)  
        .equ PWR_REGLPF_Shift, 5   @ bitWidth 1 (Regulator LP flag)  
        .equ PWR_VOSF_Shift, 4   @ bitWidth 1 (Voltage Scaling select  flag)  
        .equ PWR_VREFINTRDYF_Shift, 3   @ bitWidth 1 (Internal voltage reference VREFINT  ready flag)  
        .equ PWR_PVDO_Shift, 2   @ bitWidth 1 (PVD output)  
        .equ PWR_SBF_Shift, 1   @ bitWidth 1 (Standby flag)  
        .equ PWR_WUF_Shift, 0   @ bitWidth 1 (Wakeup flag)  
 

@=========================== RCC ===========================@
.equ RCC_BASE, 0x40023800 @ (Reset and clock control) 
    .equ RCC_CR, RCC_BASE + 0x0 @ (Clock control register) 
        .equ RCC_RTCPRE1_Shift, 30   @ bitWidth 1 (TC/LCD prescaler)  
        .equ RCC_RTCPRE0_Shift, 29   @ bitWidth 1 (RTCPRE0)  
        .equ RCC_CSSON_Shift, 28   @ bitWidth 1 (Clock security system  enable)  
        .equ RCC_PLLRDY_Shift, 25   @ bitWidth 1 (PLL clock ready flag)  
        .equ RCC_PLLON_Shift, 24   @ bitWidth 1 (PLL enable)  
        .equ RCC_HSEBYP_Shift, 18   @ bitWidth 1 (HSE clock bypass)  
        .equ RCC_HSERDY_Shift, 17   @ bitWidth 1 (HSE clock ready flag)  
        .equ RCC_HSEON_Shift, 16   @ bitWidth 1 (HSE clock enable)  
        .equ RCC_MSIRDY_Shift, 9   @ bitWidth 1 (MSI clock ready flag)  
        .equ RCC_MSION_Shift, 8   @ bitWidth 1 (MSI clock enable)  
        .equ RCC_HSIRDY_Shift, 1   @ bitWidth 1 (Internal high-speed clock ready  flag)  
        .equ RCC_HSION_Shift, 0   @ bitWidth 1 (Internal high-speed clock  enable)  
 
    .equ RCC_ICSCR, RCC_BASE + 0x4 @ (Internal clock sources calibration  register) 
        .equ RCC_MSITRIM_Shift, 24   @ bitWidth 8 (MSI clock trimming)  
        .equ RCC_MSICAL_Shift, 16   @ bitWidth 8 (MSI clock calibration)  
        .equ RCC_MSIRANGE_Shift, 13   @ bitWidth 3 (MSI clock ranges)  
        .equ RCC_HSITRIM_Shift, 8   @ bitWidth 5 (High speed internal clock  trimming)  
        .equ RCC_HSICAL_Shift, 0   @ bitWidth 8 (nternal high speed clock  calibration)  
 
    .equ RCC_CFGR, RCC_BASE + 0x8 @ (Clock configuration register) 
        .equ RCC_MCOPRE_Shift, 28   @ bitWidth 3 (Microcontroller clock output  prescaler)  
        .equ RCC_MCOSEL_Shift, 24   @ bitWidth 3 (Microcontroller clock output  selection)  
        .equ RCC_PLLDIV_Shift, 22   @ bitWidth 2 (PLL output division)  
        .equ RCC_PLLMUL_Shift, 18   @ bitWidth 4 (PLL multiplication factor)  
        .equ RCC_PLLSRC_Shift, 16   @ bitWidth 1 (PLL entry clock source)  
        .equ RCC_PPRE2_Shift, 11   @ bitWidth 3 (APB high-speed prescaler  APB2)  
        .equ RCC_PPRE1_Shift, 8   @ bitWidth 3 (APB low-speed prescaler  APB1)  
        .equ RCC_HPRE_Shift, 4   @ bitWidth 4 (AHB prescaler)  
        .equ RCC_SWS_Shift, 2   @ bitWidth 2 (System clock switch status)  
        .equ RCC_SW_Shift, 0   @ bitWidth 2 (System clock switch)  
 
    .equ RCC_CIR, RCC_BASE + 0xC @ (Clock interrupt register) 
        .equ RCC_CSSC_Shift, 23   @ bitWidth 1 (Clock security system interrupt  clear)  
        .equ RCC_LSECSSC_Shift, 22   @ bitWidth 1 (LSE CSS interrupt clear)  
        .equ RCC_MSIRDYC_Shift, 21   @ bitWidth 1 (MSI ready interrupt clear)  
        .equ RCC_PLLRDYC_Shift, 20   @ bitWidth 1 (PLL ready interrupt clear)  
        .equ RCC_HSERDYC_Shift, 19   @ bitWidth 1 (HSE ready interrupt clear)  
        .equ RCC_HSIRDYC_Shift, 18   @ bitWidth 1 (HSI ready interrupt clear)  
        .equ RCC_LSERDYC_Shift, 17   @ bitWidth 1 (LSE ready interrupt clear)  
        .equ RCC_LSIRDYC_Shift, 16   @ bitWidth 1 (LSI ready interrupt clear)  
        .equ RCC_LSECSSIE_Shift, 14   @ bitWidth 1 (LSE CSS interrupt enable)  
        .equ RCC_MSIRDYIE_Shift, 13   @ bitWidth 1 (MSI ready interrupt enable)  
        .equ RCC_PLLRDYIE_Shift, 12   @ bitWidth 1 (PLL ready interrupt enable)  
        .equ RCC_HSERDYIE_Shift, 11   @ bitWidth 1 (HSE ready interrupt enable)  
        .equ RCC_HSIRDYIE_Shift, 10   @ bitWidth 1 (HSI ready interrupt enable)  
        .equ RCC_LSERDYIE_Shift, 9   @ bitWidth 1 (LSE ready interrupt enable)  
        .equ RCC_LSIRDYIE_Shift, 8   @ bitWidth 1 (LSI ready interrupt enable)  
        .equ RCC_CSSF_Shift, 7   @ bitWidth 1 (Clock security system interrupt  flag)  
        .equ RCC_LSECSSF_Shift, 6   @ bitWidth 1 (LSE CSS Interrupt flag)  
        .equ RCC_MSIRDYF_Shift, 5   @ bitWidth 1 (MSI ready interrupt flag)  
        .equ RCC_PLLRDYF_Shift, 4   @ bitWidth 1 (PLL ready interrupt flag)  
        .equ RCC_HSERDYF_Shift, 3   @ bitWidth 1 (HSE ready interrupt flag)  
        .equ RCC_HSIRDYF_Shift, 2   @ bitWidth 1 (HSI ready interrupt flag)  
        .equ RCC_LSERDYF_Shift, 1   @ bitWidth 1 (LSE ready interrupt flag)  
        .equ RCC_LSIRDYF_Shift, 0   @ bitWidth 1 (LSI ready interrupt flag)  
 
    .equ RCC_AHBRSTR, RCC_BASE + 0x10 @ (AHB peripheral reset register) 
        .equ RCC_DMA2RST_Shift, 25   @ bitWidth 1 (DMA2 reset)  
        .equ RCC_DMA1RST_Shift, 24   @ bitWidth 1 (DMA1 reset)  
        .equ RCC_FLITFRST_Shift, 15   @ bitWidth 1 (FLITF reset)  
        .equ RCC_CRCRST_Shift, 12   @ bitWidth 1 (CRC reset)  
        .equ RCC_GPIOGRST_Shift, 7   @ bitWidth 1 (IO port G reset)  
        .equ RCC_GPIOFRST_Shift, 6   @ bitWidth 1 (IO port F reset)  
        .equ RCC_GPIOHRST_Shift, 5   @ bitWidth 1 (IO port H reset)  
        .equ RCC_GPIOERST_Shift, 4   @ bitWidth 1 (IO port E reset)  
        .equ RCC_GPIODRST_Shift, 3   @ bitWidth 1 (IO port D reset)  
        .equ RCC_GPIOCRST_Shift, 2   @ bitWidth 1 (IO port C reset)  
        .equ RCC_GPIOBRST_Shift, 1   @ bitWidth 1 (IO port B reset)  
        .equ RCC_GPIOARST_Shift, 0   @ bitWidth 1 (IO port A reset)  
 
    .equ RCC_APB2RSTR, RCC_BASE + 0x14 @ (APB2 peripheral reset register) 
        .equ RCC_USART1RST_Shift, 14   @ bitWidth 1 (USART1RST)  
        .equ RCC_SPI1RST_Shift, 12   @ bitWidth 1 (SPI1RST)  
        .equ RCC_ADC1RST_Shift, 9   @ bitWidth 1 (ADC1RST)  
        .equ RCC_TM11RST_Shift, 4   @ bitWidth 1 (TM11RST)  
        .equ RCC_TM10RST_Shift, 3   @ bitWidth 1 (TM10RST)  
        .equ RCC_TIM9RST_Shift, 2   @ bitWidth 1 (TIM9RST)  
        .equ RCC_SYSCFGRST_Shift, 0   @ bitWidth 1 (SYSCFGRST)  
 
    .equ RCC_APB1RSTR, RCC_BASE + 0x18 @ (APB1 peripheral reset register) 
        .equ RCC_COMPRST_Shift, 31   @ bitWidth 1 (COMP interface reset)  
        .equ RCC_DACRST_Shift, 29   @ bitWidth 1 (DAC interface reset)  
        .equ RCC_PWRRST_Shift, 28   @ bitWidth 1 (Power interface reset)  
        .equ RCC_USBRST_Shift, 23   @ bitWidth 1 (USB reset)  
        .equ RCC_I2C2RST_Shift, 22   @ bitWidth 1 (I2C 2 reset)  
        .equ RCC_I2C1RST_Shift, 21   @ bitWidth 1 (I2C 1 reset)  
        .equ RCC_USART3RST_Shift, 18   @ bitWidth 1 (USART 3 reset)  
        .equ RCC_USART2RST_Shift, 17   @ bitWidth 1 (USART 2 reset)  
        .equ RCC_SPI3RST_Shift, 15   @ bitWidth 1 (SPI 3 reset)  
        .equ RCC_SPI2RST_Shift, 14   @ bitWidth 1 (SPI 2 reset)  
        .equ RCC_WWDRST_Shift, 11   @ bitWidth 1 (Window watchdog reset)  
        .equ RCC_LCDRST_Shift, 9   @ bitWidth 1 (LCD reset)  
        .equ RCC_TIM7RST_Shift, 5   @ bitWidth 1 (Timer 7 reset)  
        .equ RCC_TIM6RST_Shift, 4   @ bitWidth 1 (Timer 6reset)  
        .equ RCC_TIM5RST_Shift, 3   @ bitWidth 1 (Timer 5 reset)  
        .equ RCC_TIM4RST_Shift, 2   @ bitWidth 1 (Timer 4 reset)  
        .equ RCC_TIM3RST_Shift, 1   @ bitWidth 1 (Timer 3 reset)  
        .equ RCC_TIM2RST_Shift, 0   @ bitWidth 1 (Timer 2 reset)  
 
    .equ RCC_AHBENR, RCC_BASE + 0x1C @ (AHB peripheral clock enable  register) 
        .equ RCC_DMA2EN_Shift, 25   @ bitWidth 1 (DMA2 clock enable)  
        .equ RCC_DMA1EN_Shift, 24   @ bitWidth 1 (DMA1 clock enable)  
        .equ RCC_FLITFEN_Shift, 15   @ bitWidth 1 (FLITF clock enable)  
        .equ RCC_CRCEN_Shift, 12   @ bitWidth 1 (CRC clock enable)  
        .equ RCC_GPIOPGEN_Shift, 7   @ bitWidth 1 (IO port G clock enable)  
        .equ RCC_GPIOPFEN_Shift, 6   @ bitWidth 1 (IO port F clock enable)  
        .equ RCC_GPIOPHEN_Shift, 5   @ bitWidth 1 (IO port H clock enable)  
        .equ RCC_GPIOPEEN_Shift, 4   @ bitWidth 1 (IO port E clock enable)  
        .equ RCC_GPIOPDEN_Shift, 3   @ bitWidth 1 (IO port D clock enable)  
        .equ RCC_GPIOPCEN_Shift, 2   @ bitWidth 1 (IO port C clock enable)  
        .equ RCC_GPIOPBEN_Shift, 1   @ bitWidth 1 (IO port B clock enable)  
        .equ RCC_GPIOPAEN_Shift, 0   @ bitWidth 1 (IO port A clock enable)  
 
    .equ RCC_APB2ENR, RCC_BASE + 0x20 @ (APB2 peripheral clock enable  register) 
        .equ RCC_USART1EN_Shift, 14   @ bitWidth 1 (USART1 clock enable)  
        .equ RCC_SPI1EN_Shift, 12   @ bitWidth 1 (SPI 1 clock enable)  
        .equ RCC_ADC1EN_Shift, 9   @ bitWidth 1 (ADC1 interface clock  enable)  
        .equ RCC_TIM11EN_Shift, 4   @ bitWidth 1 (TIM11 timer clock enable)  
        .equ RCC_TIM10EN_Shift, 3   @ bitWidth 1 (TIM10 timer clock enable)  
        .equ RCC_TIM9EN_Shift, 2   @ bitWidth 1 (TIM9 timer clock enable)  
        .equ RCC_SYSCFGEN_Shift, 0   @ bitWidth 1 (System configuration controller clock  enable)  
 
    .equ RCC_APB1ENR, RCC_BASE + 0x24 @ (APB1 peripheral clock enable  register) 
        .equ RCC_COMPEN_Shift, 31   @ bitWidth 1 (COMP interface clock  enable)  
        .equ RCC_DACEN_Shift, 29   @ bitWidth 1 (DAC interface clock enable)  
        .equ RCC_PWREN_Shift, 28   @ bitWidth 1 (Power interface clock  enable)  
        .equ RCC_USBEN_Shift, 23   @ bitWidth 1 (USB clock enable)  
        .equ RCC_I2C2EN_Shift, 22   @ bitWidth 1 (I2C 2 clock enable)  
        .equ RCC_I2C1EN_Shift, 21   @ bitWidth 1 (I2C 1 clock enable)  
        .equ RCC_USART3EN_Shift, 18   @ bitWidth 1 (USART 3 clock enable)  
        .equ RCC_USART2EN_Shift, 17   @ bitWidth 1 (USART 2 clock enable)  
        .equ RCC_SPI3EN_Shift, 15   @ bitWidth 1 (SPI 3 clock enable)  
        .equ RCC_SPI2EN_Shift, 14   @ bitWidth 1 (SPI 2 clock enable)  
        .equ RCC_WWDGEN_Shift, 11   @ bitWidth 1 (Window watchdog clock  enable)  
        .equ RCC_LCDEN_Shift, 9   @ bitWidth 1 (LCD clock enable)  
        .equ RCC_TIM7EN_Shift, 5   @ bitWidth 1 (Timer 7 clock enable)  
        .equ RCC_TIM6EN_Shift, 4   @ bitWidth 1 (Timer 6 clock enable)  
        .equ RCC_TIM5EN_Shift, 3   @ bitWidth 1 (Timer 5 clock enable)  
        .equ RCC_TIM4EN_Shift, 2   @ bitWidth 1 (Timer 4 clock enable)  
        .equ RCC_TIM3EN_Shift, 1   @ bitWidth 1 (Timer 3 clock enable)  
        .equ RCC_TIM2EN_Shift, 0   @ bitWidth 1 (Timer 2 clock enable)  
 
    .equ RCC_AHBLPENR, RCC_BASE + 0x28 @ (AHB peripheral clock enable in low power  mode register) 
        .equ RCC_DMA2LPEN_Shift, 25   @ bitWidth 1 (DMA2 clock enable during Sleep  mode)  
        .equ RCC_DMA1LPEN_Shift, 24   @ bitWidth 1 (DMA1 clock enable during Sleep  mode)  
        .equ RCC_SRAMLPEN_Shift, 16   @ bitWidth 1 (SRAM clock enable during Sleep  mode)  
        .equ RCC_FLITFLPEN_Shift, 15   @ bitWidth 1 (FLITF clock enable during Sleep  mode)  
        .equ RCC_CRCLPEN_Shift, 12   @ bitWidth 1 (CRC clock enable during Sleep  mode)  
        .equ RCC_GPIOGLPEN_Shift, 7   @ bitWidth 1 (IO port G clock enable during Sleep  mode)  
        .equ RCC_GPIOFLPEN_Shift, 6   @ bitWidth 1 (IO port F clock enable during Sleep  mode)  
        .equ RCC_GPIOHLPEN_Shift, 5   @ bitWidth 1 (IO port H clock enable during Sleep  mode)  
        .equ RCC_GPIOELPEN_Shift, 4   @ bitWidth 1 (IO port E clock enable during Sleep  mode)  
        .equ RCC_GPIODLPEN_Shift, 3   @ bitWidth 1 (IO port D clock enable during Sleep  mode)  
        .equ RCC_GPIOCLPEN_Shift, 2   @ bitWidth 1 (IO port C clock enable during Sleep  mode)  
        .equ RCC_GPIOBLPEN_Shift, 1   @ bitWidth 1 (IO port B clock enable during Sleep  mode)  
        .equ RCC_GPIOALPEN_Shift, 0   @ bitWidth 1 (IO port A clock enable during Sleep  mode)  
 
    .equ RCC_APB2LPENR, RCC_BASE + 0x2C @ (APB2 peripheral clock enable in low power  mode register) 
        .equ RCC_USART1LPEN_Shift, 14   @ bitWidth 1 (USART1 clock enable during Sleep  mode)  
        .equ RCC_SPI1LPEN_Shift, 12   @ bitWidth 1 (SPI 1 clock enable during Sleep  mode)  
        .equ RCC_ADC1LPEN_Shift, 9   @ bitWidth 1 (ADC1 interface clock enable during Sleep  mode)  
        .equ RCC_TIM11LPEN_Shift, 4   @ bitWidth 1 (TIM11 timer clock enable during Sleep  mode)  
        .equ RCC_TIM10LPEN_Shift, 3   @ bitWidth 1 (TIM10 timer clock enable during Sleep  mode)  
        .equ RCC_TIM9LPEN_Shift, 2   @ bitWidth 1 (TIM9 timer clock enable during Sleep  mode)  
        .equ RCC_SYSCFGLPEN_Shift, 0   @ bitWidth 1 (System configuration controller clock  enable during Sleep mode)  
 
    .equ RCC_APB1LPENR, RCC_BASE + 0x30 @ (APB1 peripheral clock enable in low power  mode register) 
        .equ RCC_COMPLPEN_Shift, 31   @ bitWidth 1 (COMP interface clock enable during Sleep  mode)  
        .equ RCC_DACLPEN_Shift, 29   @ bitWidth 1 (DAC interface clock enable during Sleep  mode)  
        .equ RCC_PWRLPEN_Shift, 28   @ bitWidth 1 (Power interface clock enable during  Sleep mode)  
        .equ RCC_USBLPEN_Shift, 23   @ bitWidth 1 (USB clock enable during Sleep  mode)  
        .equ RCC_I2C2LPEN_Shift, 22   @ bitWidth 1 (I2C 2 clock enable during Sleep  mode)  
        .equ RCC_I2C1LPEN_Shift, 21   @ bitWidth 1 (I2C 1 clock enable during Sleep  mode)  
        .equ RCC_USART3LPEN_Shift, 18   @ bitWidth 1 (USART 3 clock enable during Sleep  mode)  
        .equ RCC_USART2LPEN_Shift, 17   @ bitWidth 1 (USART 2 clock enable during Sleep  mode)  
        .equ RCC_SPI2LPEN_Shift, 14   @ bitWidth 1 (SPI 2 clock enable during Sleep  mode)  
        .equ RCC_WWDGLPEN_Shift, 11   @ bitWidth 1 (Window watchdog clock enable during  Sleep mode)  
        .equ RCC_LCDLPEN_Shift, 9   @ bitWidth 1 (LCD clock enable during Sleep  mode)  
        .equ RCC_TIM7LPEN_Shift, 5   @ bitWidth 1 (Timer 7 clock enable during Sleep  mode)  
        .equ RCC_TIM6LPEN_Shift, 4   @ bitWidth 1 (Timer 6 clock enable during Sleep  mode)  
        .equ RCC_TIM4LPEN_Shift, 2   @ bitWidth 1 (Timer 4 clock enable during Sleep  mode)  
        .equ RCC_TIM3LPEN_Shift, 1   @ bitWidth 1 (Timer 3 clock enable during Sleep  mode)  
        .equ RCC_TIM2LPEN_Shift, 0   @ bitWidth 1 (Timer 2 clock enable during Sleep  mode)  
 
    .equ RCC_CSR, RCC_BASE + 0x34 @ (Control/status register) 
        .equ RCC_LPWRSTF_Shift, 31   @ bitWidth 1 (Low-power reset flag)  
        .equ RCC_WWDGRSTF_Shift, 30   @ bitWidth 1 (Window watchdog reset flag)  
        .equ RCC_IWDGRSTF_Shift, 29   @ bitWidth 1 (Independent watchdog reset  flag)  
        .equ RCC_SFTRSTF_Shift, 28   @ bitWidth 1 (Software reset flag)  
        .equ RCC_PORRSTF_Shift, 27   @ bitWidth 1 (POR/PDR reset flag)  
        .equ RCC_PINRSTF_Shift, 26   @ bitWidth 1 (PIN reset flag)  
        .equ RCC_OBLRSTF_Shift, 25   @ bitWidth 1 (Options bytes loading reset  flag)  
        .equ RCC_RMVF_Shift, 24   @ bitWidth 1 (Remove reset flag)  
        .equ RCC_RTCRST_Shift, 23   @ bitWidth 1 (RTC software reset)  
        .equ RCC_RTCEN_Shift, 22   @ bitWidth 1 (RTC clock enable)  
        .equ RCC_RTCSEL_Shift, 16   @ bitWidth 2 (RTC and LCD clock source  selection)  
        .equ RCC_LSECSSD_Shift, 12   @ bitWidth 1 (CSS on LSE failure  Detection)  
        .equ RCC_LSECSSON_Shift, 11   @ bitWidth 1 (CSS on LSE enable)  
        .equ RCC_LSEBYP_Shift, 10   @ bitWidth 1 (External low-speed oscillator  bypass)  
        .equ RCC_LSERDY_Shift, 9   @ bitWidth 1 (External low-speed oscillator  ready)  
        .equ RCC_LSEON_Shift, 8   @ bitWidth 1 (External low-speed oscillator  enable)  
        .equ RCC_LSIRDY_Shift, 1   @ bitWidth 1 (Internal low-speed oscillator  ready)  
        .equ RCC_LSION_Shift, 0   @ bitWidth 1 (Internal low-speed oscillator  enable)  
 

@=========================== RI ===========================@
.equ RI_BASE, 0x40007C04 @ (Routing interface) 
    .equ RI_ICR, RI_BASE + 0x0 @ (RI input capture register) 
        .equ RI_IC4_Shift, 21   @ bitWidth 1 (IC4)  
        .equ RI_IC3_Shift, 20   @ bitWidth 1 (IC3)  
        .equ RI_IC2_Shift, 19   @ bitWidth 1 (IC2)  
        .equ RI_IC1_Shift, 18   @ bitWidth 1 (IC1)  
        .equ RI_TIM_Shift, 16   @ bitWidth 2 (Timer select bits)  
        .equ RI_IC4IOS_Shift, 12   @ bitWidth 4 (Input capture 4 select  bits)  
        .equ RI_IC3IOS_Shift, 8   @ bitWidth 4 (Input capture 3 select  bits)  
        .equ RI_IC2IOS_Shift, 4   @ bitWidth 4 (Input capture 2 select  bits)  
        .equ RI_IC1IOS_Shift, 0   @ bitWidth 4 (Input capture 1 select  bits)  
 
    .equ RI_ASCR1, RI_BASE + 0x4 @ (RI analog switches control register  1) 
        .equ RI_SCM_Shift, 31   @ bitWidth 1 (Switch control mode)  
        .equ RI_CH30GR11_4_Shift, 30   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH29GR11_3_Shift, 29   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH28GR11_2_Shift, 28   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH27GR11_1_Shift, 27   @ bitWidth 1 (Analog switch control)  
        .equ RI_VCOMP_Shift, 26   @ bitWidth 1 (ADC analog switch selection for internal  node to comparator 1)  
        .equ RI_CH25_Shift, 25   @ bitWidth 1 (Analog I/O switch control of channel  CH25)  
        .equ RI_CH24_Shift, 24   @ bitWidth 1 (Analog I/O switch control of channel  CH24)  
        .equ RI_CH23_Shift, 23   @ bitWidth 1 (Analog I/O switch control of channel  CH23)  
        .equ RI_CH22_Shift, 22   @ bitWidth 1 (Analog I/O switch control of channel  CH22)  
        .equ RI_CH21GR7_4_Shift, 21   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH20GR7_3_Shift, 20   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH19GR7_2_Shift, 19   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH18GR7_1_Shift, 18   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH31GR7_1_Shift, 16   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH15GR9_2_Shift, 15   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH14GR9_1_Shift, 14   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH13GR8_4_Shift, 13   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH12GR8_3_Shift, 12   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH11GR8_2_Shift, 11   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH10GR8_1_Shift, 10   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH9GR3_2_Shift, 9   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH8GR3_1_Shift, 8   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH7GR2_2_Shift, 7   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH6GR2_1_Shift, 6   @ bitWidth 1 (Analog switch control)  
        .equ RI_COMP1_SW1_Shift, 5   @ bitWidth 1 (Comparator 1 analog switch)  
        .equ RI_CH31GR11_5_Shift, 4   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH3GR1_4_Shift, 3   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH2GR1_3_Shift, 2   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH1GR1_2_Shift, 1   @ bitWidth 1 (Analog switch control)  
        .equ RI_CH0GR1_1_Shift, 0   @ bitWidth 1 (Analog switch control)  
 
    .equ RI_ASCR2, RI_BASE + 0x8 @ (RI analog switches control register  2) 
        .equ RI_GR5_4_Shift, 29   @ bitWidth 1 (GR5_4 analog switch  control)  
        .equ RI_GR6_4_Shift, 28   @ bitWidth 1 (GR6_4 analog switch  control)  
        .equ RI_GR6_3_Shift, 27   @ bitWidth 1 (GR6_3 analog switch  control)  
        .equ RI_GR7_7_Shift, 26   @ bitWidth 1 (GR7_7 analog switch  control)  
        .equ RI_GR7_6_Shift, 25   @ bitWidth 1 (GR7_6 analog switch  control)  
        .equ RI_GR7_5_Shift, 24   @ bitWidth 1 (GR7_5 analog switch  control)  
        .equ RI_GR2_5_Shift, 23   @ bitWidth 1 (GR2_5 analog switch  control)  
        .equ RI_GR2_4_Shift, 22   @ bitWidth 1 (GR2_4 analog switch  control)  
        .equ RI_GR2_3_Shift, 21   @ bitWidth 1 (GR2_3 analog switch  control)  
        .equ RI_GR9_4_Shift, 20   @ bitWidth 1 (GR9_4 analog switch  control)  
        .equ RI_GR9_3_Shift, 19   @ bitWidth 1 (GR9_3 analog switch  control)  
        .equ RI_GR3_5_Shift, 18   @ bitWidth 1 (GR3_5 analog switch  control)  
        .equ RI_GR3_4_Shift, 17   @ bitWidth 1 (GR3_4 analog switch  control)  
        .equ RI_GR3_3_Shift, 16   @ bitWidth 1 (GR3_3 analog switch  control)  
        .equ RI_GR4_3_Shift, 11   @ bitWidth 1 (GR4_3 analog switch  control)  
        .equ RI_GR4_2_Shift, 10   @ bitWidth 1 (GR4_2 analog switch  control)  
        .equ RI_GR4_1_Shift, 9   @ bitWidth 1 (GR4_1 analog switch  control)  
        .equ RI_GR5_3_Shift, 8   @ bitWidth 1 (GR5_3 analog switch  control)  
        .equ RI_GR5_2_Shift, 7   @ bitWidth 1 (GR5_2 analog switch  control)  
        .equ RI_GR5_1_Shift, 6   @ bitWidth 1 (GR5_1 analog switch  control)  
        .equ RI_GR6_2_Shift, 5   @ bitWidth 1 (GR6_2 analog switch  control)  
        .equ RI_GR6_1_Shift, 4   @ bitWidth 1 (GR6_1 analog switch  control)  
        .equ RI_GR10_4_Shift, 3   @ bitWidth 1 (GR10_4 analog switch  control)  
        .equ RI_GR10_3_Shift, 2   @ bitWidth 1 (GR10_3 analog switch  control)  
        .equ RI_GR10_2_Shift, 1   @ bitWidth 1 (GR10_2 analog switch  control)  
        .equ RI_GR10_1_Shift, 0   @ bitWidth 1 (GR10_1 analog switch  control)  
 
    .equ RI_HYSCR1, RI_BASE + 0xC @ (RI hysteresis control register  1) 
        .equ RI_PB_Shift, 16   @ bitWidth 16 (Port B hysteresis control  on/off)  
        .equ RI_PA_Shift, 0   @ bitWidth 16 (Port A hysteresis control  on/off)  
 
    .equ RI_HYSCR2, RI_BASE + 0x10 @ (RI hysteresis control register  2) 
        .equ RI_PD_Shift, 16   @ bitWidth 16 (Port D hysteresis control  on/off)  
        .equ RI_PC_Shift, 0   @ bitWidth 16 (Port C hysteresis control  on/off)  
 
    .equ RI_HYSCR3, RI_BASE + 0x14 @ (RI hysteresis control register  3) 
        .equ RI_PF_Shift, 16   @ bitWidth 16 (Port F hysteresis control  on/off)  
        .equ RI_PE_Shift, 0   @ bitWidth 16 (Port E hysteresis control  on/off)  
 
    .equ RI_HYSCR4, RI_BASE + 0x18 @ (Hysteresis control register) 
        .equ RI_PG_Shift, 0   @ bitWidth 16 (Port G hysteresis control  on/off)  
 
    .equ RI_ASMR1, RI_BASE + 0x1C @ (Analog switch mode register) 
        .equ RI_PA_Shift, 0   @ bitWidth 16 (Port A analog switch mode  selection)  
 
    .equ RI_CMR1, RI_BASE + 0x20 @ (Channel mask register) 
        .equ RI_PA_Shift, 0   @ bitWidth 16 (Port A channel masking)  
 
    .equ RI_CICR1, RI_BASE + 0x24 @ (Channel identification for capture  register) 
        .equ RI_PA_Shift, 0   @ bitWidth 16 (Port A channel identification for  capture)  
 
    .equ RI_ASMR2, RI_BASE + 0x28 @ (Analog switch mode register) 
        .equ RI_PB_Shift, 0   @ bitWidth 16 (Port B analog switch mode  selection)  
 
    .equ RI_CMR2, RI_BASE + 0x2C @ (Channel mask register) 
        .equ RI_PB_Shift, 0   @ bitWidth 16 (Port B channel masking)  
 
    .equ RI_CICR2, RI_BASE + 0x30 @ (Channel identification for capture  register) 
        .equ RI_PB_Shift, 0   @ bitWidth 16 (Port B channel identification for  capture)  
 
    .equ RI_ASMR3, RI_BASE + 0x34 @ (Analog switch mode register) 
        .equ RI_PC_Shift, 0   @ bitWidth 16 (Port C analog switch mode  selection)  
 
    .equ RI_CMR3, RI_BASE + 0x38 @ (Channel mask register) 
        .equ RI_PC_Shift, 0   @ bitWidth 16 (Port C channel masking)  
 
    .equ RI_CICR3, RI_BASE + 0x3C @ (Channel identification for capture  register) 
        .equ RI_PC_Shift, 0   @ bitWidth 16 (Port C channel identification for  capture)  
 
    .equ RI_ASMR4, RI_BASE + 0x40 @ (Analog switch mode register) 
        .equ RI_PF_Shift, 0   @ bitWidth 16 (Port F analog switch mode  selection)  
 
    .equ RI_CMR4, RI_BASE + 0x44 @ (Channel mask register) 
        .equ RI_PF_Shift, 0   @ bitWidth 16 (Port F channel masking)  
 
    .equ RI_CICR4, RI_BASE + 0x48 @ (Channel identification for capture  register) 
        .equ RI_PF_Shift, 0   @ bitWidth 16 (Port F channel identification for  capture)  
 
    .equ RI_ASMR5, RI_BASE + 0x4C @ (Analog switch mode register) 
        .equ RI_PG_Shift, 0   @ bitWidth 16 (Port G analog switch mode  selection)  
 
    .equ RI_CMR5, RI_BASE + 0x50 @ (Channel mask register) 
        .equ RI_PG_Shift, 0   @ bitWidth 16 (Port G channel masking)  
 
    .equ RI_CICR5, RI_BASE + 0x54 @ (Channel identification for capture  register) 
        .equ RI_PG_Shift, 0   @ bitWidth 16 (Port G channel identification for  capture)  
 

@=========================== RTC ===========================@
.equ RTC_BASE, 0x40002800 @ (Real-time clock) 
    .equ RTC_TR, RTC_BASE + 0x0 @ (time register) 
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_DR, RTC_BASE + 0x4 @ (date register) 
        .equ RTC_YT_Shift, 20   @ bitWidth 4 (Year tens in BCD format)  
        .equ RTC_YU_Shift, 16   @ bitWidth 4 (Year units in BCD format)  
        .equ RTC_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_MT_Shift, 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_CR, RTC_BASE + 0x8 @ (control register) 
        .equ RTC_COE_Shift, 23   @ bitWidth 1 (Calibration output enable)  
        .equ RTC_OSEL_Shift, 21   @ bitWidth 2 (Output selection)  
        .equ RTC_POL_Shift, 20   @ bitWidth 1 (Output polarity)  
        .equ RTC_COSEL_Shift, 19   @ bitWidth 1 (Calibration output  selection)  
        .equ RTC_BKP_Shift, 18   @ bitWidth 1 (Backup)  
        .equ RTC_SUB1H_Shift, 17   @ bitWidth 1 (Subtract 1 hour)  
        .equ RTC_ADD1H_Shift, 16   @ bitWidth 1 (Add 1 hour)  
        .equ RTC_TSIE_Shift, 15   @ bitWidth 1 (Time-stamp interrupt  enable)  
        .equ RTC_WUTIE_Shift, 14   @ bitWidth 1 (Wakeup timer interrupt  enable)  
        .equ RTC_ALRBIE_Shift, 13   @ bitWidth 1 (Alarm B interrupt enable)  
        .equ RTC_ALRAIE_Shift, 12   @ bitWidth 1 (Alarm A interrupt enable)  
        .equ RTC_TSE_Shift, 11   @ bitWidth 1 (Time stamp enable)  
        .equ RTC_WUTE_Shift, 10   @ bitWidth 1 (Wakeup timer enable)  
        .equ RTC_ALRBE_Shift, 9   @ bitWidth 1 (Alarm B enable)  
        .equ RTC_ALRAE_Shift, 8   @ bitWidth 1 (Alarm A enable)  
        .equ RTC_DCE_Shift, 7   @ bitWidth 1 (Coarse digital calibration  enable)  
        .equ RTC_FMT_Shift, 6   @ bitWidth 1 (Hour format)  
        .equ RTC_BYPSHAD_Shift, 5   @ bitWidth 1 (Bypass the shadow  registers)  
        .equ RTC_REFCKON_Shift, 4   @ bitWidth 1 (Reference clock detection  enable)  
        .equ RTC_TSEDGE_Shift, 3   @ bitWidth 1 (Time-stamp event active  edge)  
        .equ RTC_WCKSEL_Shift, 0   @ bitWidth 3 (WCKSEL)  
 
    .equ RTC_ISR, RTC_BASE + 0xC @ (initialization and status  register) 
        .equ RTC_RECALPF_Shift, 16   @ bitWidth 1 (Recalibration pending Flag)  
        .equ RTC_TAMP3F_Shift, 15   @ bitWidth 1 (TAMPER3 detection flag)  
        .equ RTC_TAMP2F_Shift, 14   @ bitWidth 1 (TAMPER2 detection flag)  
        .equ RTC_TAMP1F_Shift, 13   @ bitWidth 1 (Tamper detection flag)  
        .equ RTC_TSOVF_Shift, 12   @ bitWidth 1 (Timestamp overflow flag)  
        .equ RTC_TSF_Shift, 11   @ bitWidth 1 (Timestamp flag)  
        .equ RTC_WUTF_Shift, 10   @ bitWidth 1 (Wakeup timer flag)  
        .equ RTC_ALRBF_Shift, 9   @ bitWidth 1 (Alarm B flag)  
        .equ RTC_ALRAF_Shift, 8   @ bitWidth 1 (Alarm A flag)  
        .equ RTC_INIT_Shift, 7   @ bitWidth 1 (Initialization mode)  
        .equ RTC_INITF_Shift, 6   @ bitWidth 1 (Initialization flag)  
        .equ RTC_RSF_Shift, 5   @ bitWidth 1 (Registers synchronization  flag)  
        .equ RTC_INITS_Shift, 4   @ bitWidth 1 (Initialization status flag)  
        .equ RTC_SHPF_Shift, 3   @ bitWidth 1 (Shift operation pending)  
        .equ RTC_WUTWF_Shift, 2   @ bitWidth 1 (Wakeup timer write flag)  
        .equ RTC_ALRBWF_Shift, 1   @ bitWidth 1 (Alarm B write flag)  
        .equ RTC_ALRAWF_Shift, 0   @ bitWidth 1 (Alarm A write flag)  
 
    .equ RTC_PRER, RTC_BASE + 0x10 @ (prescaler register) 
        .equ RTC_PREDIV_A_Shift, 16   @ bitWidth 7 (Asynchronous prescaler  factor)  
        .equ RTC_PREDIV_S_Shift, 0   @ bitWidth 15 (Synchronous prescaler  factor)  
 
    .equ RTC_WUTR, RTC_BASE + 0x14 @ (wakeup timer register) 
        .equ RTC_WUT_Shift, 0   @ bitWidth 16 (Wakeup auto-reload value  bits)  
 
    .equ RTC_CALIBR, RTC_BASE + 0x18 @ (calibration register) 
        .equ RTC_DCS_Shift, 7   @ bitWidth 1 (Digital calibration sign)  
        .equ RTC_DC_Shift, 0   @ bitWidth 5 (Digital calibration)  
 
    .equ RTC_ALRMAR, RTC_BASE + 0x1C @ (alarm A register) 
        .equ RTC_MSK4_Shift, 31   @ bitWidth 1 (Alarm A date mask)  
        .equ RTC_WDSEL_Shift, 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format.)  
        .equ RTC_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD  format.)  
        .equ RTC_MSK3_Shift, 23   @ bitWidth 1 (Alarm A hours mask)  
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format.)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format.)  
        .equ RTC_MSK2_Shift, 15   @ bitWidth 1 (Alarm A minutes mask)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format.)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD  format.)  
        .equ RTC_MSK1_Shift, 7   @ bitWidth 1 (Alarm A seconds mask)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format.)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD  format.)  
 
    .equ RTC_ALRMBR, RTC_BASE + 0x20 @ (alarm B register) 
        .equ RTC_MSK4_Shift, 31   @ bitWidth 1 (Alarm B date mask)  
        .equ RTC_WDSEL_Shift, 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD  format)  
        .equ RTC_MSK3_Shift, 23   @ bitWidth 1 (Alarm B hours mask)  
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_MSK2_Shift, 15   @ bitWidth 1 (Alarm B minutes mask)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_MSK1_Shift, 7   @ bitWidth 1 (Alarm B seconds mask)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_WPR, RTC_BASE + 0x24 @ (write protection register) 
        .equ RTC_KEY_Shift, 0   @ bitWidth 8 (Write protection key)  
 
    .equ RTC_SSR, RTC_BASE + 0x28 @ (sub second register) 
        .equ RTC_SS_Shift, 0   @ bitWidth 16 (Sub second value)  
 
    .equ RTC_SHIFTR, RTC_BASE + 0x2C @ (shift control register) 
        .equ RTC_ADD1S_Shift, 31   @ bitWidth 1 (ADD1S)  
        .equ RTC_SUBFS_Shift, 0   @ bitWidth 15 (Subtract a fraction of a  second)  
 
    .equ RTC_TSTR, RTC_BASE + 0x30 @ (TSTR) 
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format.)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format.)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format.)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD  format.)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format.)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD  format.)  
 
    .equ RTC_TSDR, RTC_BASE + 0x34 @ (time stamp date register) 
        .equ RTC_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_MT_Shift, 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_TSSSR, RTC_BASE + 0x38 @ (timestamp sub second register) 
        .equ RTC_SS_Shift, 0   @ bitWidth 16 (Sub second value)  
 
    .equ RTC_CALR, RTC_BASE + 0x3C @ (calibration register) 
        .equ RTC_CALP_Shift, 15   @ bitWidth 1 (Use an 8-second calibration cycle  period)  
        .equ RTC_CALW8_Shift, 14   @ bitWidth 1 (Use a 16-second calibration cycle  period)  
        .equ RTC_CALW16_Shift, 13   @ bitWidth 1 (CALW16)  
        .equ RTC_CALM_Shift, 0   @ bitWidth 9 (Calibration minus)  
 
    .equ RTC_TAFCR, RTC_BASE + 0x40 @ (tamper and alternate function configuration  register) 
        .equ RTC_ALARMOUTTYPE_Shift, 18   @ bitWidth 1 (AFO_ALARM output type)  
        .equ RTC_TAMPPUDIS_Shift, 15   @ bitWidth 1 (TAMPER pull-up disable)  
        .equ RTC_TAMPPRCH_Shift, 13   @ bitWidth 2 (Tamper precharge duration)  
        .equ RTC_TAMPFLT_Shift, 11   @ bitWidth 2 (Tamper filter count)  
        .equ RTC_TAMPFREQ_Shift, 8   @ bitWidth 3 (Tamper sampling frequency)  
        .equ RTC_TAMPTS_Shift, 7   @ bitWidth 1 (Activate timestamp on tamper detection  event)  
        .equ RTC_TAMP3TRG_Shift, 6   @ bitWidth 1 (TAMPER1 mapping)  
        .equ RTC_TAMP3E_Shift, 5   @ bitWidth 1 (TIMESTAMP mapping)  
        .equ RTC_TAMP2TRG_Shift, 4   @ bitWidth 1 (Active level for tamper 2)  
        .equ RTC_TAMP2E_Shift, 3   @ bitWidth 1 (Tamper 2 detection enable)  
        .equ RTC_TAMPIE_Shift, 2   @ bitWidth 1 (Tamper interrupt enable)  
        .equ RTC_TAMP1ETRG_Shift, 1   @ bitWidth 1 (Active level for tamper 1)  
        .equ RTC_TAMP1E_Shift, 0   @ bitWidth 1 (Tamper 1 detection enable)  
 
    .equ RTC_ALRMASSR, RTC_BASE + 0x44 @ (alarm A sub second register) 
        .equ RTC_MASKSS_Shift, 24   @ bitWidth 4 (Mask the most-significant bits starting  at this bit)  
        .equ RTC_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_ALRMBSSR, RTC_BASE + 0x48 @ (alarm B sub second register) 
        .equ RTC_MASKSS_Shift, 24   @ bitWidth 4 (Mask the most-significant bits starting  at this bit)  
        .equ RTC_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_BKP0R, RTC_BASE + 0x50 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP1R, RTC_BASE + 0x54 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP2R, RTC_BASE + 0x58 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP3R, RTC_BASE + 0x5C @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP4R, RTC_BASE + 0x60 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP5R, RTC_BASE + 0x64 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP6R, RTC_BASE + 0x68 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP7R, RTC_BASE + 0x6C @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP8R, RTC_BASE + 0x70 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP9R, RTC_BASE + 0x74 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP10R, RTC_BASE + 0x78 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP11R, RTC_BASE + 0x7C @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP12R, RTC_BASE + 0x80 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP13R, RTC_BASE + 0x84 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP14R, RTC_BASE + 0x88 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP15R, RTC_BASE + 0x8C @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP16R, RTC_BASE + 0x90 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP17R, RTC_BASE + 0x94 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP18R, RTC_BASE + 0x98 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP19R, RTC_BASE + 0x9C @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP20R, RTC_BASE + 0xA0 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP21R, RTC_BASE + 0xA4 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP22R, RTC_BASE + 0xA8 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP23R, RTC_BASE + 0xAC @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP24R, RTC_BASE + 0xB0 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP25R, RTC_BASE + 0xB4 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP26R, RTC_BASE + 0xB8 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP27R, RTC_BASE + 0xBC @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP28R, RTC_BASE + 0xC0 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP29R, RTC_BASE + 0xC4 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP30R, RTC_BASE + 0xC8 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP31R, RTC_BASE + 0xCC @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 

@=========================== SPI1 ===========================@
.equ SPI1_BASE, 0x40013000 @ (Serial peripheral interface) 
    .equ SPI1_CR1, SPI1_BASE + 0x0 @ (control register 1) 
        .equ SPI1_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI1_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI1_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI1_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI1_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI1_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI1_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI1_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI1_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI1_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI1_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI1_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI1_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI1_CR2, SPI1_BASE + 0x4 @ (control register 2) 
        .equ SPI1_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI1_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI1_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI1_FRF_Shift, 4   @ bitWidth 1 (Frame format)  
        .equ SPI1_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI1_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI1_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ SPI1_SR, SPI1_BASE + 0x8 @ (status register) 
        .equ SPI1_TIFRFE_Shift, 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI1_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI1_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI1_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI1_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI1_UDR_Shift, 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI1_CHSIDE_Shift, 2   @ bitWidth 1 (Channel side)  
        .equ SPI1_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI1_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ SPI1_DR, SPI1_BASE + 0xC @ (data register) 
        .equ SPI1_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI1_CRCPR, SPI1_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI1_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI1_RXCRCR, SPI1_BASE + 0x14 @ (RX CRC register) 
        .equ SPI1_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI1_TXCRCR, SPI1_BASE + 0x18 @ (TX CRC register) 
        .equ SPI1_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI1_I2SCFGR, SPI1_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI1_I2SMOD_Shift, 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI1_I2SE_Shift, 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI1_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI1_PCMSYNC_Shift, 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI1_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI1_CKPOL_Shift, 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI1_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI1_CHLEN_Shift, 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI1_I2SPR, SPI1_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI1_MCKOE_Shift, 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI1_ODD_Shift, 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI1_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI2 ===========================@
.equ SPI2_BASE, 0x40003800 @ (Serial peripheral interface) 
    .equ SPI2_CR1, SPI2_BASE + 0x0 @ (control register 1) 
        .equ SPI2_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI2_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI2_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI2_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI2_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI2_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI2_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI2_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI2_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI2_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI2_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI2_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI2_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI2_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI2_CR2, SPI2_BASE + 0x4 @ (control register 2) 
        .equ SPI2_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI2_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI2_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI2_FRF_Shift, 4   @ bitWidth 1 (Frame format)  
        .equ SPI2_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI2_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI2_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ SPI2_SR, SPI2_BASE + 0x8 @ (status register) 
        .equ SPI2_TIFRFE_Shift, 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI2_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI2_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI2_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI2_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI2_UDR_Shift, 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI2_CHSIDE_Shift, 2   @ bitWidth 1 (Channel side)  
        .equ SPI2_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI2_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ SPI2_DR, SPI2_BASE + 0xC @ (data register) 
        .equ SPI2_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI2_CRCPR, SPI2_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI2_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI2_RXCRCR, SPI2_BASE + 0x14 @ (RX CRC register) 
        .equ SPI2_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI2_TXCRCR, SPI2_BASE + 0x18 @ (TX CRC register) 
        .equ SPI2_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI2_I2SCFGR, SPI2_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI2_I2SMOD_Shift, 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI2_I2SE_Shift, 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI2_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI2_PCMSYNC_Shift, 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI2_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI2_CKPOL_Shift, 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI2_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI2_CHLEN_Shift, 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI2_I2SPR, SPI2_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI2_MCKOE_Shift, 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI2_ODD_Shift, 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI2_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI3 ===========================@
.equ SPI3_BASE, 0x40003C00 @ (Serial peripheral interface) 
    .equ SPI3_CR1, SPI3_BASE + 0x0 @ (control register 1) 
        .equ SPI3_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI3_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI3_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI3_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI3_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI3_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI3_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI3_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI3_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI3_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI3_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI3_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI3_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI3_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI3_CR2, SPI3_BASE + 0x4 @ (control register 2) 
        .equ SPI3_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI3_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI3_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI3_FRF_Shift, 4   @ bitWidth 1 (Frame format)  
        .equ SPI3_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI3_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI3_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ SPI3_SR, SPI3_BASE + 0x8 @ (status register) 
        .equ SPI3_TIFRFE_Shift, 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI3_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI3_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI3_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI3_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI3_UDR_Shift, 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI3_CHSIDE_Shift, 2   @ bitWidth 1 (Channel side)  
        .equ SPI3_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI3_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ SPI3_DR, SPI3_BASE + 0xC @ (data register) 
        .equ SPI3_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI3_CRCPR, SPI3_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI3_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI3_RXCRCR, SPI3_BASE + 0x14 @ (RX CRC register) 
        .equ SPI3_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI3_TXCRCR, SPI3_BASE + 0x18 @ (TX CRC register) 
        .equ SPI3_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI3_I2SCFGR, SPI3_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI3_I2SMOD_Shift, 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI3_I2SE_Shift, 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI3_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI3_PCMSYNC_Shift, 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI3_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI3_CKPOL_Shift, 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI3_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI3_CHLEN_Shift, 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI3_I2SPR, SPI3_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI3_MCKOE_Shift, 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI3_ODD_Shift, 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI3_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SYSCFG ===========================@
.equ SYSCFG_BASE, 0x40010000 @ (System configuration controller) 
    .equ SYSCFG_MEMRMP, SYSCFG_BASE + 0x0 @ (memory remap register) 
        .equ SYSCFG_MEM_MODE_Shift, 0   @ bitWidth 2 (MEM_MODE)  
        .equ SYSCFG_BOOT_MODE_Shift, 8   @ bitWidth 2 (BOOT_MODE)  
 
    .equ SYSCFG_PMC, SYSCFG_BASE + 0x4 @ (peripheral mode configuration  register) 
        .equ SYSCFG_USB_PU_Shift, 0   @ bitWidth 1 (USB pull-up)  
 
    .equ SYSCFG_EXTICR1, SYSCFG_BASE + 0x8 @ (external interrupt configuration register  1) 
        .equ SYSCFG_EXTI3_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 0 to  3)  
        .equ SYSCFG_EXTI2_Shift, 8   @ bitWidth 4 (EXTI x configuration x = 0 to  3)  
        .equ SYSCFG_EXTI1_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 0 to  3)  
        .equ SYSCFG_EXTI0_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 0 to  3)  
 
    .equ SYSCFG_EXTICR2, SYSCFG_BASE + 0xC @ (external interrupt configuration register  2) 
        .equ SYSCFG_EXTI7_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 4 to  7)  
        .equ SYSCFG_EXTI6_Shift, 8   @ bitWidth 4 (EXTI x configuration x = 4 to  7)  
        .equ SYSCFG_EXTI5_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 4 to  7)  
        .equ SYSCFG_EXTI4_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 4 to  7)  
 
    .equ SYSCFG_EXTICR3, SYSCFG_BASE + 0x10 @ (external interrupt configuration register  3) 
        .equ SYSCFG_EXTI11_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 8 to  11)  
        .equ SYSCFG_EXTI10_Shift, 8   @ bitWidth 4 (EXTI10)  
        .equ SYSCFG_EXTI9_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 8 to  11)  
        .equ SYSCFG_EXTI8_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 8 to  11)  
 
    .equ SYSCFG_EXTICR4, SYSCFG_BASE + 0x14 @ (external interrupt configuration register  4) 
        .equ SYSCFG_EXTI15_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 12 to  15)  
        .equ SYSCFG_EXTI14_Shift, 8   @ bitWidth 4 (EXTI14)  
        .equ SYSCFG_EXTI13_Shift, 4   @ bitWidth 4 (EXTI13)  
        .equ SYSCFG_EXTI12_Shift, 0   @ bitWidth 4 (EXTI12)  
 

@=========================== TIM10 ===========================@
.equ TIM10_BASE, 0x40010C00 @ (General-purpose timers) 
    .equ TIM10_CR1, TIM10_BASE + 0x0 @ (control register 1) 
        .equ TIM10_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM10_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM10_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM10_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM10_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM10_DIER, TIM10_BASE + 0xC @ (Interrupt enable register) 
        .equ TIM10_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM10_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM10_SR, TIM10_BASE + 0x10 @ (status register) 
        .equ TIM10_CC1OF_Shift, 9   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM10_CC1IF_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  flag)  
        .equ TIM10_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM10_EGR, TIM10_BASE + 0x14 @ (event generation register) 
        .equ TIM10_CC1G_Shift, 1   @ bitWidth 1 (Capture/Compare 1  generation)  
        .equ TIM10_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM10_CCMR1_Output, TIM10_BASE + 0x18 @ (capture/compare mode register) 
        .equ TIM10_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM10_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM10_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM10_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM10_CCMR1_Input, TIM10_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM10_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM10_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM10_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM10_CCER, TIM10_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM10_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 complementary output  Polarity)  
        .equ TIM10_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM10_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM10_CNT, TIM10_BASE + 0x24 @ (counter) 
        .equ TIM10_CNT_Shift, 0   @ bitWidth 16 (TIM10 counter)  
 
    .equ TIM10_PSC, TIM10_BASE + 0x28 @ (prescaler) 
        .equ TIM10_PSC_Shift, 0   @ bitWidth 16 (TIM9 prescaler)  
 
    .equ TIM10_ARR, TIM10_BASE + 0x2C @ (auto-reload register) 
        .equ TIM10_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM10_CCR1, TIM10_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM10_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM10_OR, TIM10_BASE + 0x50 @ (option register) 
        .equ TIM10_TI1_RMP_Shift, 0   @ bitWidth 2 (TIM11 Input 1 remapping  capability)  
 

@=========================== TIM11 ===========================@
.equ TIM11_BASE, 0x40011000 @ (General-purpose timers) 
    .equ TIM11_CR1, TIM11_BASE + 0x0 @ (control register 1) 
        .equ TIM11_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM11_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM11_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM11_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM11_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM11_DIER, TIM11_BASE + 0xC @ (Interrupt enable register) 
        .equ TIM11_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM11_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM11_SR, TIM11_BASE + 0x10 @ (status register) 
        .equ TIM11_CC1OF_Shift, 9   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM11_CC1IF_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  flag)  
        .equ TIM11_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM11_EGR, TIM11_BASE + 0x14 @ (event generation register) 
        .equ TIM11_CC1G_Shift, 1   @ bitWidth 1 (Capture/Compare 1  generation)  
        .equ TIM11_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM11_CCMR1_Output, TIM11_BASE + 0x18 @ (capture/compare mode register) 
        .equ TIM11_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM11_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM11_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM11_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM11_CCMR1_Input, TIM11_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM11_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM11_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM11_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM11_CCER, TIM11_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM11_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 complementary output  Polarity)  
        .equ TIM11_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM11_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM11_CNT, TIM11_BASE + 0x24 @ (counter) 
        .equ TIM11_CNT_Shift, 0   @ bitWidth 16 (TIM10 counter)  
 
    .equ TIM11_PSC, TIM11_BASE + 0x28 @ (prescaler) 
        .equ TIM11_PSC_Shift, 0   @ bitWidth 16 (TIM9 prescaler)  
 
    .equ TIM11_ARR, TIM11_BASE + 0x2C @ (auto-reload register) 
        .equ TIM11_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM11_CCR1, TIM11_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM11_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM11_OR, TIM11_BASE + 0x50 @ (option register) 
        .equ TIM11_TI1_RMP_Shift, 0   @ bitWidth 2 (TIM11 Input 1 remapping  capability)  
 

@=========================== TIM2 ===========================@
.equ TIM2_BASE, 0x40000000 @ (General-purpose timers) 
    .equ TIM2_CR1, TIM2_BASE + 0x0 @ (control register 1) 
        .equ TIM2_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM2_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM2_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM2_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM2_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM2_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM2_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM2_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM2_CR2, TIM2_BASE + 0x4 @ (control register 2) 
        .equ TIM2_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM2_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM2_SMCR, TIM2_BASE + 0x8 @ (slave mode control register) 
        .equ TIM2_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM2_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM2_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM2_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM2_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM2_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM2_OCCS_Shift, 3   @ bitWidth 1 (OCREF clear selection)  
        .equ TIM2_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM2_DIER, TIM2_BASE + 0xC @ (Interrupt enable register) 
        .equ TIM2_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM2_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM2_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM2_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM2_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM2_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM2_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM2_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM2_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM2_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM2_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM2_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM2_SR, TIM2_BASE + 0x10 @ (status register) 
        .equ TIM2_CC4OF_Shift, 12   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM2_CC3OF_Shift, 11   @ bitWidth 1 (Capture/compare 3 overcapture  flag)  
        .equ TIM2_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM2_CC1OF_Shift, 9   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM2_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM2_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM2_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM2_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM2_CC1IF_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  flag)  
        .equ TIM2_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM2_EGR, TIM2_BASE + 0x14 @ (event generation register) 
        .equ TIM2_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM2_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM2_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM2_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM2_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM2_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM2_CCMR1_Output, TIM2_BASE + 0x18 @ (capture/compare mode register  1) 
        .equ TIM2_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM2_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM2_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM2_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM2_CC2S_Shift, 8   @ bitWidth 1 (Capture/Compare 2  selection)  
        .equ TIM2_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM2_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM2_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM2_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM2_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM2_CCMR1_Input, TIM2_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM2_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM2_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM2_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM2_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM2_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM2_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM2_CCMR2_Output, TIM2_BASE + 0x1C @ (capture/compare mode register  2) 
        .equ TIM2_OC4CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM2_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM2_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM2_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM2_CC4S_Shift, 8   @ bitWidth 1 (Capture/Compare 4  selection)  
        .equ TIM2_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM2_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM2_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM2_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM2_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM2_CCMR2_Input, TIM2_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM2_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM2_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM2_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM2_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM2_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM2_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM2_CCER, TIM2_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM2_CC4NP_Shift, 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM2_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM2_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM2_CC3NP_Shift, 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM2_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM2_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM2_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM2_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM2_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM2_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 complementary output  Polarity)  
        .equ TIM2_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM2_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM2_CNT, TIM2_BASE + 0x24 @ (counter) 
        .equ TIM2_CNT_Shift, 0   @ bitWidth 16 (TIM2 counter)  
 
    .equ TIM2_PSC, TIM2_BASE + 0x28 @ (prescaler) 
        .equ TIM2_PSC_Shift, 0   @ bitWidth 16 (TIM2 prescaler)  
 
    .equ TIM2_ARR, TIM2_BASE + 0x2C @ (auto-reload register) 
        .equ TIM2_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM2_CCR1, TIM2_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM2_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM2_CCR2, TIM2_BASE + 0x38 @ (capture/compare register 1) 
        .equ TIM2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM2_CCR3, TIM2_BASE + 0x3C @ (capture/compare register 1) 
        .equ TIM2_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM2_CCR4, TIM2_BASE + 0x40 @ (capture/compare register 1) 
        .equ TIM2_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare 4 value)  
 
    .equ TIM2_DCR, TIM2_BASE + 0x48 @ (DMA control register) 
        .equ TIM2_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM2_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM2_DMAR, TIM2_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM2_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM3 ===========================@
.equ TIM3_BASE, 0x40000400 @ (General-purpose timers) 
    .equ TIM3_CR1, TIM3_BASE + 0x0 @ (control register 1) 
        .equ TIM3_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM3_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM3_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM3_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM3_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM3_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM3_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM3_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM3_CR2, TIM3_BASE + 0x4 @ (control register 2) 
        .equ TIM3_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM3_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM3_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM3_SMCR, TIM3_BASE + 0x8 @ (slave mode control register) 
        .equ TIM3_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM3_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM3_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM3_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM3_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM3_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM3_OCCS_Shift, 3   @ bitWidth 1 (OCREF clear selection)  
        .equ TIM3_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM3_DIER, TIM3_BASE + 0xC @ (Interrupt enable register) 
        .equ TIM3_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM3_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM3_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM3_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM3_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM3_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM3_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM3_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM3_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM3_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM3_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM3_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM3_SR, TIM3_BASE + 0x10 @ (status register) 
        .equ TIM3_CC4OF_Shift, 12   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM3_CC3OF_Shift, 11   @ bitWidth 1 (Capture/compare 3 overcapture  flag)  
        .equ TIM3_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM3_CC1OF_Shift, 9   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM3_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM3_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM3_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM3_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM3_CC1IF_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  flag)  
        .equ TIM3_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM3_EGR, TIM3_BASE + 0x14 @ (event generation register) 
        .equ TIM3_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM3_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM3_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM3_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM3_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM3_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM3_CCMR1_Output, TIM3_BASE + 0x18 @ (capture/compare mode register  1) 
        .equ TIM3_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM3_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM3_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM3_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM3_CC2S_Shift, 8   @ bitWidth 1 (Capture/Compare 2  selection)  
        .equ TIM3_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM3_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM3_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM3_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM3_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM3_CCMR1_Input, TIM3_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM3_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM3_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM3_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM3_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM3_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM3_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM3_CCMR2_Output, TIM3_BASE + 0x1C @ (capture/compare mode register  2) 
        .equ TIM3_OC4CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM3_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM3_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM3_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM3_CC4S_Shift, 8   @ bitWidth 1 (Capture/Compare 4  selection)  
        .equ TIM3_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM3_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM3_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM3_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM3_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM3_CCMR2_Input, TIM3_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM3_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM3_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM3_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM3_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM3_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM3_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM3_CCER, TIM3_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM3_CC4NP_Shift, 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM3_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM3_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM3_CC3NP_Shift, 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM3_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM3_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM3_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM3_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 complementary output  Polarity)  
        .equ TIM3_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM3_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM3_CNT, TIM3_BASE + 0x24 @ (counter) 
        .equ TIM3_CNT_Shift, 0   @ bitWidth 16 (TIM2 counter)  
 
    .equ TIM3_PSC, TIM3_BASE + 0x28 @ (prescaler) 
        .equ TIM3_PSC_Shift, 0   @ bitWidth 16 (TIM2 prescaler)  
 
    .equ TIM3_ARR, TIM3_BASE + 0x2C @ (auto-reload register) 
        .equ TIM3_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM3_CCR1, TIM3_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM3_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM3_CCR2, TIM3_BASE + 0x38 @ (capture/compare register 1) 
        .equ TIM3_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM3_CCR3, TIM3_BASE + 0x3C @ (capture/compare register 1) 
        .equ TIM3_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM3_CCR4, TIM3_BASE + 0x40 @ (capture/compare register 1) 
        .equ TIM3_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare 4 value)  
 
    .equ TIM3_DCR, TIM3_BASE + 0x48 @ (DMA control register) 
        .equ TIM3_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM3_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM3_DMAR, TIM3_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM3_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM4 ===========================@
.equ TIM4_BASE, 0x40000800 @ (General-purpose timers) 
    .equ TIM4_CR1, TIM4_BASE + 0x0 @ (control register 1) 
        .equ TIM4_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM4_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM4_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM4_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM4_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM4_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM4_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM4_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM4_CR2, TIM4_BASE + 0x4 @ (control register 2) 
        .equ TIM4_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM4_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM4_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM4_SMCR, TIM4_BASE + 0x8 @ (slave mode control register) 
        .equ TIM4_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM4_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM4_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM4_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM4_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM4_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM4_OCCS_Shift, 3   @ bitWidth 1 (OCREF clear selection)  
        .equ TIM4_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM4_DIER, TIM4_BASE + 0xC @ (Interrupt enable register) 
        .equ TIM4_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM4_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM4_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM4_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM4_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM4_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM4_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM4_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM4_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM4_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM4_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM4_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM4_SR, TIM4_BASE + 0x10 @ (status register) 
        .equ TIM4_CC4OF_Shift, 12   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM4_CC3OF_Shift, 11   @ bitWidth 1 (Capture/compare 3 overcapture  flag)  
        .equ TIM4_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM4_CC1OF_Shift, 9   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM4_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM4_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM4_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM4_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM4_CC1IF_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  flag)  
        .equ TIM4_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM4_EGR, TIM4_BASE + 0x14 @ (event generation register) 
        .equ TIM4_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM4_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM4_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM4_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM4_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM4_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM4_CCMR1_Output, TIM4_BASE + 0x18 @ (capture/compare mode register  1) 
        .equ TIM4_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM4_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM4_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM4_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM4_CC2S_Shift, 8   @ bitWidth 1 (Capture/Compare 2  selection)  
        .equ TIM4_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM4_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM4_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM4_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM4_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM4_CCMR1_Input, TIM4_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM4_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM4_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM4_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM4_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM4_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM4_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM4_CCMR2_Output, TIM4_BASE + 0x1C @ (capture/compare mode register  2) 
        .equ TIM4_OC4CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM4_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM4_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM4_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM4_CC4S_Shift, 8   @ bitWidth 1 (Capture/Compare 4  selection)  
        .equ TIM4_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM4_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM4_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM4_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM4_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM4_CCMR2_Input, TIM4_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM4_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM4_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM4_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM4_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM4_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM4_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM4_CCER, TIM4_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM4_CC4NP_Shift, 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM4_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM4_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM4_CC3NP_Shift, 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM4_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM4_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM4_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM4_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM4_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM4_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 complementary output  Polarity)  
        .equ TIM4_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM4_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM4_CNT, TIM4_BASE + 0x24 @ (counter) 
        .equ TIM4_CNT_Shift, 0   @ bitWidth 16 (TIM2 counter)  
 
    .equ TIM4_PSC, TIM4_BASE + 0x28 @ (prescaler) 
        .equ TIM4_PSC_Shift, 0   @ bitWidth 16 (TIM2 prescaler)  
 
    .equ TIM4_ARR, TIM4_BASE + 0x2C @ (auto-reload register) 
        .equ TIM4_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM4_CCR1, TIM4_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM4_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM4_CCR2, TIM4_BASE + 0x38 @ (capture/compare register 1) 
        .equ TIM4_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM4_CCR3, TIM4_BASE + 0x3C @ (capture/compare register 1) 
        .equ TIM4_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM4_CCR4, TIM4_BASE + 0x40 @ (capture/compare register 1) 
        .equ TIM4_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare 4 value)  
 
    .equ TIM4_DCR, TIM4_BASE + 0x48 @ (DMA control register) 
        .equ TIM4_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM4_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM4_DMAR, TIM4_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM4_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM5 ===========================@
.equ TIM5_BASE, 0x40000C00 @ (General-purpose timers) 
    .equ TIM5_CR1, TIM5_BASE + 0x0 @ (control register 1) 
        .equ TIM5_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM5_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM5_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM5_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM5_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM5_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM5_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM5_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM5_CR2, TIM5_BASE + 0x4 @ (control register 2) 
        .equ TIM5_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM5_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM5_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM5_SMCR, TIM5_BASE + 0x8 @ (slave mode control register) 
        .equ TIM5_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM5_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM5_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM5_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM5_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM5_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM5_OCCS_Shift, 3   @ bitWidth 1 (OCREF clear selection)  
        .equ TIM5_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM5_DIER, TIM5_BASE + 0xC @ (Interrupt enable register) 
        .equ TIM5_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM5_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM5_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM5_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM5_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM5_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM5_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM5_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM5_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM5_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM5_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM5_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM5_SR, TIM5_BASE + 0x10 @ (status register) 
        .equ TIM5_CC4OF_Shift, 12   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM5_CC3OF_Shift, 11   @ bitWidth 1 (Capture/compare 3 overcapture  flag)  
        .equ TIM5_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM5_CC1OF_Shift, 9   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM5_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM5_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM5_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM5_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM5_CC1IF_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  flag)  
        .equ TIM5_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM5_EGR, TIM5_BASE + 0x14 @ (event generation register) 
        .equ TIM5_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM5_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM5_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM5_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM5_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM5_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM5_CCMR1_Output, TIM5_BASE + 0x18 @ (capture/compare mode register  1) 
        .equ TIM5_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM5_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM5_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM5_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM5_CC2S_Shift, 8   @ bitWidth 1 (Capture/Compare 2  selection)  
        .equ TIM5_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM5_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM5_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM5_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM5_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM5_CCMR1_Input, TIM5_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM5_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM5_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM5_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM5_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM5_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM5_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM5_CCMR2_Output, TIM5_BASE + 0x1C @ (capture/compare mode register  2) 
        .equ TIM5_OC4CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM5_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM5_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM5_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM5_CC4S_Shift, 8   @ bitWidth 1 (Capture/Compare 4  selection)  
        .equ TIM5_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM5_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM5_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM5_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM5_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM5_CCMR2_Input, TIM5_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM5_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM5_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM5_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM5_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM5_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM5_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM5_CCER, TIM5_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM5_CC4NP_Shift, 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM5_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM5_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM5_CC3NP_Shift, 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM5_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM5_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM5_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM5_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM5_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM5_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 complementary output  Polarity)  
        .equ TIM5_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM5_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM5_CNT, TIM5_BASE + 0x24 @ (counter) 
        .equ TIM5_CNT_Shift, 0   @ bitWidth 16 (TIM2 counter)  
 
    .equ TIM5_PSC, TIM5_BASE + 0x28 @ (prescaler) 
        .equ TIM5_PSC_Shift, 0   @ bitWidth 16 (TIM2 prescaler)  
 
    .equ TIM5_ARR, TIM5_BASE + 0x2C @ (auto-reload register) 
        .equ TIM5_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM5_CCR1, TIM5_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM5_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM5_CCR2, TIM5_BASE + 0x38 @ (capture/compare register 1) 
        .equ TIM5_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM5_CCR3, TIM5_BASE + 0x3C @ (capture/compare register 1) 
        .equ TIM5_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM5_CCR4, TIM5_BASE + 0x40 @ (capture/compare register 1) 
        .equ TIM5_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare 4 value)  
 
    .equ TIM5_DCR, TIM5_BASE + 0x48 @ (DMA control register) 
        .equ TIM5_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM5_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM5_DMAR, TIM5_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM5_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM6 ===========================@
.equ TIM6_BASE, 0x40001000 @ (Basic timers) 
    .equ TIM6_CR1, TIM6_BASE + 0x0 @ (TIM6 control register 1) 
        .equ TIM6_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM6_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM6_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM6_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM6_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM6_CR2, TIM6_BASE + 0x4 @ (TIM6 control register 2) 
        .equ TIM6_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM6_DIER, TIM6_BASE + 0xC @ (TIM6 DMA/Interrupt enable  register) 
        .equ TIM6_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM6_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM6_SR, TIM6_BASE + 0x10 @ (TIM6 status register) 
        .equ TIM6_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM6_EGR, TIM6_BASE + 0x14 @ (TIM6 event generation register) 
        .equ TIM6_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM6_CNT, TIM6_BASE + 0x24 @ (TIM6 counter) 
        .equ TIM6_CNT_Shift, 0   @ bitWidth 16 (CNT)  
 
    .equ TIM6_PSC, TIM6_BASE + 0x28 @ (TIM6 prescaler) 
        .equ TIM6_PSC_Shift, 0   @ bitWidth 16 (Prescaler valueThe counter clock  frequency CK_CNT is equal to fCK_PSC / PSC[15:0] +  1.)  
 
    .equ TIM6_ARR, TIM6_BASE + 0x2C @ (TIM6 auto-reload register) 
        .equ TIM6_ARR_Shift, 0   @ bitWidth 16 (Prescaler value)  
 

@=========================== TIM7 ===========================@
.equ TIM7_BASE, 0x40001400 @ (Basic timers) 
    .equ TIM7_CR1, TIM7_BASE + 0x0 @ (TIM6 control register 1) 
        .equ TIM7_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM7_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM7_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM7_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM7_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM7_CR2, TIM7_BASE + 0x4 @ (TIM6 control register 2) 
        .equ TIM7_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM7_DIER, TIM7_BASE + 0xC @ (TIM6 DMA/Interrupt enable  register) 
        .equ TIM7_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM7_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM7_SR, TIM7_BASE + 0x10 @ (TIM6 status register) 
        .equ TIM7_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM7_EGR, TIM7_BASE + 0x14 @ (TIM6 event generation register) 
        .equ TIM7_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM7_CNT, TIM7_BASE + 0x24 @ (TIM6 counter) 
        .equ TIM7_CNT_Shift, 0   @ bitWidth 16 (CNT)  
 
    .equ TIM7_PSC, TIM7_BASE + 0x28 @ (TIM6 prescaler) 
        .equ TIM7_PSC_Shift, 0   @ bitWidth 16 (Prescaler valueThe counter clock  frequency CK_CNT is equal to fCK_PSC / PSC[15:0] +  1.)  
 
    .equ TIM7_ARR, TIM7_BASE + 0x2C @ (TIM6 auto-reload register) 
        .equ TIM7_ARR_Shift, 0   @ bitWidth 16 (Prescaler value)  
 

@=========================== TIM9 ===========================@
.equ TIM9_BASE, 0x40010800 @ (General-purpose timers) 
    .equ TIM9_CR1, TIM9_BASE + 0x0 @ (control register 1) 
        .equ TIM9_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM9_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM9_OMP_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM9_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM9_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM9_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM9_CR2, TIM9_BASE + 0x4 @ (control register 2) 
        .equ TIM9_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM9_SMCR, TIM9_BASE + 0x8 @ (slave mode control register) 
        .equ TIM9_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM9_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM9_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM9_DIER, TIM9_BASE + 0xC @ (Interrupt enable register) 
        .equ TIM9_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM9_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM9_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM9_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM9_SR, TIM9_BASE + 0x10 @ (status register) 
        .equ TIM9_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM9_CC1OF_Shift, 9   @ bitWidth 1 (Capture/compare 1 overcapture  flag)  
        .equ TIM9_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM9_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM9_CC1IF_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  flag)  
        .equ TIM9_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM9_EGR, TIM9_BASE + 0x14 @ (event generation register) 
        .equ TIM9_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM9_CC2G_Shift, 2   @ bitWidth 1 (Capture/Compare 2  generation)  
        .equ TIM9_CC1G_Shift, 1   @ bitWidth 1 (Capture/Compare 1  generation)  
        .equ TIM9_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM9_CCMR1_Output, TIM9_BASE + 0x18 @ (capture/compare mode register  1) 
        .equ TIM9_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM9_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM9_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM9_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM9_CC2S_Shift, 8   @ bitWidth 1 (Capture/Compare 2  selection)  
        .equ TIM9_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM9_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM9_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM9_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM9_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM9_CCMR1_Input, TIM9_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM9_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM9_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM9_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM9_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM9_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM9_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM9_CNT, TIM9_BASE + 0x24 @ (counter) 
        .equ TIM9_CNT_Shift, 0   @ bitWidth 16 (TIM9 counter)  
 
    .equ TIM9_PSC, TIM9_BASE + 0x28 @ (prescaler) 
        .equ TIM9_PSC_Shift, 0   @ bitWidth 16 (TIM9 prescaler)  
 
    .equ TIM9_ARR, TIM9_BASE + 0x2C @ (auto-reload register) 
        .equ TIM9_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM9_CCR1, TIM9_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM9_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM9_CCR2, TIM9_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM9_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM9_OR, TIM9_BASE + 0x50 @ (option register) 
        .equ TIM9_TI1_RMP_Shift, 0   @ bitWidth 2 (TIM9 Input 1 remapping  capability)  
 

@=========================== USART1 ===========================@
.equ USART1_BASE, 0x40013800 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART1_SR, USART1_BASE + 0x0 @ (Status register) 
        .equ USART1_CTS_Shift, 9   @ bitWidth 1 (CTS flag)  
        .equ USART1_LBD_Shift, 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART1_TXE_Shift, 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART1_TC_Shift, 6   @ bitWidth 1 (Transmission complete)  
        .equ USART1_RXNE_Shift, 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART1_IDLE_Shift, 4   @ bitWidth 1 (IDLE line detected)  
        .equ USART1_ORE_Shift, 3   @ bitWidth 1 (Overrun error)  
        .equ USART1_NF_Shift, 2   @ bitWidth 1 (Noise detected flag)  
        .equ USART1_FE_Shift, 1   @ bitWidth 1 (Framing error)  
        .equ USART1_PE_Shift, 0   @ bitWidth 1 (Parity error)  
 
    .equ USART1_DR, USART1_BASE + 0x4 @ (Data register) 
        .equ USART1_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ USART1_BRR, USART1_BASE + 0x8 @ (Baud rate register) 
        .equ USART1_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART1_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART1_CR1, USART1_BASE + 0xC @ (Control register 1) 
        .equ USART1_OVER8_Shift, 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART1_UE_Shift, 13   @ bitWidth 1 (USART enable)  
        .equ USART1_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ USART1_WAKE_Shift, 11   @ bitWidth 1 (Wakeup method)  
        .equ USART1_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ USART1_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ USART1_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART1_TXEIE_Shift, 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ USART1_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART1_RXNEIE_Shift, 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART1_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART1_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART1_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ USART1_RWU_Shift, 1   @ bitWidth 1 (Receiver wakeup)  
        .equ USART1_SBK_Shift, 0   @ bitWidth 1 (Send break)  
 
    .equ USART1_CR2, USART1_BASE + 0x10 @ (Control register 2) 
        .equ USART1_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART1_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART1_CLKEN_Shift, 11   @ bitWidth 1 (Clock enable)  
        .equ USART1_CPOL_Shift, 10   @ bitWidth 1 (Clock polarity)  
        .equ USART1_CPHA_Shift, 9   @ bitWidth 1 (Clock phase)  
        .equ USART1_LBCL_Shift, 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART1_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART1_LBDL_Shift, 5   @ bitWidth 1 (lin break detection length)  
        .equ USART1_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ USART1_CR3, USART1_BASE + 0x14 @ (Control register 3) 
        .equ USART1_ONEBIT_Shift, 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART1_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART1_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ USART1_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ USART1_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART1_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART1_SCEN_Shift, 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART1_NACK_Shift, 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART1_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART1_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART1_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART1_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART1_GTPR, USART1_BASE + 0x18 @ (Guard time and prescaler  register) 
        .equ USART1_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART1_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 

@=========================== USART2 ===========================@
.equ USART2_BASE, 0x40004400 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART2_SR, USART2_BASE + 0x0 @ (Status register) 
        .equ USART2_CTS_Shift, 9   @ bitWidth 1 (CTS flag)  
        .equ USART2_LBD_Shift, 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART2_TXE_Shift, 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART2_TC_Shift, 6   @ bitWidth 1 (Transmission complete)  
        .equ USART2_RXNE_Shift, 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART2_IDLE_Shift, 4   @ bitWidth 1 (IDLE line detected)  
        .equ USART2_ORE_Shift, 3   @ bitWidth 1 (Overrun error)  
        .equ USART2_NF_Shift, 2   @ bitWidth 1 (Noise detected flag)  
        .equ USART2_FE_Shift, 1   @ bitWidth 1 (Framing error)  
        .equ USART2_PE_Shift, 0   @ bitWidth 1 (Parity error)  
 
    .equ USART2_DR, USART2_BASE + 0x4 @ (Data register) 
        .equ USART2_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ USART2_BRR, USART2_BASE + 0x8 @ (Baud rate register) 
        .equ USART2_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART2_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART2_CR1, USART2_BASE + 0xC @ (Control register 1) 
        .equ USART2_OVER8_Shift, 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART2_UE_Shift, 13   @ bitWidth 1 (USART enable)  
        .equ USART2_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ USART2_WAKE_Shift, 11   @ bitWidth 1 (Wakeup method)  
        .equ USART2_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ USART2_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ USART2_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART2_TXEIE_Shift, 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ USART2_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART2_RXNEIE_Shift, 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART2_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART2_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART2_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ USART2_RWU_Shift, 1   @ bitWidth 1 (Receiver wakeup)  
        .equ USART2_SBK_Shift, 0   @ bitWidth 1 (Send break)  
 
    .equ USART2_CR2, USART2_BASE + 0x10 @ (Control register 2) 
        .equ USART2_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART2_CLKEN_Shift, 11   @ bitWidth 1 (Clock enable)  
        .equ USART2_CPOL_Shift, 10   @ bitWidth 1 (Clock polarity)  
        .equ USART2_CPHA_Shift, 9   @ bitWidth 1 (Clock phase)  
        .equ USART2_LBCL_Shift, 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART2_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART2_LBDL_Shift, 5   @ bitWidth 1 (lin break detection length)  
        .equ USART2_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ USART2_CR3, USART2_BASE + 0x14 @ (Control register 3) 
        .equ USART2_ONEBIT_Shift, 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART2_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART2_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ USART2_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ USART2_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART2_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART2_SCEN_Shift, 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART2_NACK_Shift, 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART2_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART2_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART2_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART2_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART2_GTPR, USART2_BASE + 0x18 @ (Guard time and prescaler  register) 
        .equ USART2_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART2_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 

@=========================== USART3 ===========================@
.equ USART3_BASE, 0x40004800 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART3_SR, USART3_BASE + 0x0 @ (Status register) 
        .equ USART3_CTS_Shift, 9   @ bitWidth 1 (CTS flag)  
        .equ USART3_LBD_Shift, 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART3_TXE_Shift, 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART3_TC_Shift, 6   @ bitWidth 1 (Transmission complete)  
        .equ USART3_RXNE_Shift, 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART3_IDLE_Shift, 4   @ bitWidth 1 (IDLE line detected)  
        .equ USART3_ORE_Shift, 3   @ bitWidth 1 (Overrun error)  
        .equ USART3_NF_Shift, 2   @ bitWidth 1 (Noise detected flag)  
        .equ USART3_FE_Shift, 1   @ bitWidth 1 (Framing error)  
        .equ USART3_PE_Shift, 0   @ bitWidth 1 (Parity error)  
 
    .equ USART3_DR, USART3_BASE + 0x4 @ (Data register) 
        .equ USART3_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ USART3_BRR, USART3_BASE + 0x8 @ (Baud rate register) 
        .equ USART3_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART3_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART3_CR1, USART3_BASE + 0xC @ (Control register 1) 
        .equ USART3_OVER8_Shift, 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART3_UE_Shift, 13   @ bitWidth 1 (USART enable)  
        .equ USART3_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ USART3_WAKE_Shift, 11   @ bitWidth 1 (Wakeup method)  
        .equ USART3_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ USART3_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ USART3_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART3_TXEIE_Shift, 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ USART3_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART3_RXNEIE_Shift, 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART3_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART3_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART3_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ USART3_RWU_Shift, 1   @ bitWidth 1 (Receiver wakeup)  
        .equ USART3_SBK_Shift, 0   @ bitWidth 1 (Send break)  
 
    .equ USART3_CR2, USART3_BASE + 0x10 @ (Control register 2) 
        .equ USART3_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART3_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART3_CLKEN_Shift, 11   @ bitWidth 1 (Clock enable)  
        .equ USART3_CPOL_Shift, 10   @ bitWidth 1 (Clock polarity)  
        .equ USART3_CPHA_Shift, 9   @ bitWidth 1 (Clock phase)  
        .equ USART3_LBCL_Shift, 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART3_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART3_LBDL_Shift, 5   @ bitWidth 1 (lin break detection length)  
        .equ USART3_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ USART3_CR3, USART3_BASE + 0x14 @ (Control register 3) 
        .equ USART3_ONEBIT_Shift, 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART3_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART3_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ USART3_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ USART3_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART3_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART3_SCEN_Shift, 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART3_NACK_Shift, 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART3_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART3_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART3_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART3_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART3_GTPR, USART3_BASE + 0x18 @ (Guard time and prescaler  register) 
        .equ USART3_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART3_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 

@=========================== USB ===========================@
.equ USB_BASE, 0x40005C00 @ (Universal serial bus full-speed device  interface) 
    .equ USB_USB_EP0R, USB_BASE + 0x0 @ (endpoint 0 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_USB_EP1R, USB_BASE + 0x4 @ (endpoint 1 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_USB_EP2R, USB_BASE + 0x8 @ (endpoint 2 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_USB_EP3R, USB_BASE + 0xC @ (endpoint 3 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_USB_EP4R, USB_BASE + 0x10 @ (endpoint 4 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_USB_EP5R, USB_BASE + 0x14 @ (endpoint 5 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_USB_EP6R, USB_BASE + 0x18 @ (endpoint 6 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_USB_EP7R, USB_BASE + 0x1C @ (endpoint 7 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_USB_CNTR, USB_BASE + 0x40 @ (control register) 
        .equ USB_FRES_Shift, 0   @ bitWidth 1 (Force USB Reset)  
        .equ USB_PDWN_Shift, 1   @ bitWidth 1 (Power down)  
        .equ USB_LPMODE_Shift, 2   @ bitWidth 1 (Low-power mode)  
        .equ USB_FSUSP_Shift, 3   @ bitWidth 1 (Force suspend)  
        .equ USB_RESUME_Shift, 4   @ bitWidth 1 (Resume request)  
        .equ USB_ESOFM_Shift, 8   @ bitWidth 1 (Expected start of frame interrupt  mask)  
        .equ USB_SOFM_Shift, 9   @ bitWidth 1 (Start of frame interrupt  mask)  
        .equ USB_RESETM_Shift, 10   @ bitWidth 1 (USB reset interrupt mask)  
        .equ USB_SUSPM_Shift, 11   @ bitWidth 1 (Suspend mode interrupt  mask)  
        .equ USB_WKUPM_Shift, 12   @ bitWidth 1 (Wakeup interrupt mask)  
        .equ USB_ERRM_Shift, 13   @ bitWidth 1 (Error interrupt mask)  
        .equ USB_PMAOVRM_Shift, 14   @ bitWidth 1 (Packet memory area over / underrun  interrupt mask)  
        .equ USB_CTRM_Shift, 15   @ bitWidth 1 (Correct transfer interrupt  mask)  
 
    .equ USB_ISTR, USB_BASE + 0x44 @ (interrupt status register) 
        .equ USB_EP_ID_Shift, 0   @ bitWidth 4 (Endpoint Identifier)  
        .equ USB_DIR_Shift, 4   @ bitWidth 1 (Direction of transaction)  
        .equ USB_ESOF_Shift, 8   @ bitWidth 1 (Expected start frame)  
        .equ USB_SOF_Shift, 9   @ bitWidth 1 (start of frame)  
        .equ USB_RESET_Shift, 10   @ bitWidth 1 (reset request)  
        .equ USB_SUSP_Shift, 11   @ bitWidth 1 (Suspend mode request)  
        .equ USB_WKUP_Shift, 12   @ bitWidth 1 (Wakeup)  
        .equ USB_ERR_Shift, 13   @ bitWidth 1 (Error)  
        .equ USB_PMAOVR_Shift, 14   @ bitWidth 1 (Packet memory area over /  underrun)  
        .equ USB_CTR_Shift, 15   @ bitWidth 1 (Correct transfer)  
 
    .equ USB_FNR, USB_BASE + 0x48 @ (frame number register) 
        .equ USB_FN_Shift, 0   @ bitWidth 11 (Frame number)  
        .equ USB_LSOF_Shift, 11   @ bitWidth 2 (Lost SOF)  
        .equ USB_LCK_Shift, 13   @ bitWidth 1 (Locked)  
        .equ USB_RXDM_Shift, 14   @ bitWidth 1 (Receive data - line status)  
        .equ USB_RXDP_Shift, 15   @ bitWidth 1 (Receive data + line status)  
 
    .equ USB_DADDR, USB_BASE + 0x4C @ (device address) 
        .equ USB_ADD_Shift, 0   @ bitWidth 7 (Device address)  
        .equ USB_EF_Shift, 7   @ bitWidth 1 (Enable function)  
 
    .equ USB_BTABLE, USB_BASE + 0x50 @ (Buffer table address) 
        .equ USB_BTABLE_Shift, 3   @ bitWidth 13 (Buffer table)  
 

@=========================== USB_SRAM ===========================@
.equ USB_SRAM_BASE, 0x40006000 @ (Universal serial bus full-speed device  interface) 
    .equ USB_SRAM_USB_EP0R, USB_SRAM_BASE + 0x0 @ (endpoint 0 register) 
        .equ USB_SRAM_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_SRAM_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_SRAM_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_SRAM_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_SRAM_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_SRAM_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SRAM_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_SRAM_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_SRAM_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_SRAM_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_SRAM_USB_EP1R, USB_SRAM_BASE + 0x4 @ (endpoint 1 register) 
        .equ USB_SRAM_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_SRAM_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_SRAM_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_SRAM_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_SRAM_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_SRAM_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SRAM_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_SRAM_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_SRAM_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_SRAM_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_SRAM_USB_EP2R, USB_SRAM_BASE + 0x8 @ (endpoint 2 register) 
        .equ USB_SRAM_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_SRAM_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_SRAM_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_SRAM_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_SRAM_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_SRAM_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SRAM_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_SRAM_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_SRAM_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_SRAM_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_SRAM_USB_EP3R, USB_SRAM_BASE + 0xC @ (endpoint 3 register) 
        .equ USB_SRAM_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_SRAM_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_SRAM_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_SRAM_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_SRAM_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_SRAM_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SRAM_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_SRAM_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_SRAM_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_SRAM_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_SRAM_USB_EP4R, USB_SRAM_BASE + 0x10 @ (endpoint 4 register) 
        .equ USB_SRAM_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_SRAM_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_SRAM_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_SRAM_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_SRAM_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_SRAM_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SRAM_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_SRAM_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_SRAM_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_SRAM_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_SRAM_USB_EP5R, USB_SRAM_BASE + 0x14 @ (endpoint 5 register) 
        .equ USB_SRAM_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_SRAM_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_SRAM_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_SRAM_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_SRAM_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_SRAM_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SRAM_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_SRAM_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_SRAM_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_SRAM_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_SRAM_USB_EP6R, USB_SRAM_BASE + 0x18 @ (endpoint 6 register) 
        .equ USB_SRAM_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_SRAM_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_SRAM_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_SRAM_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_SRAM_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_SRAM_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SRAM_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_SRAM_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_SRAM_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_SRAM_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_SRAM_USB_EP7R, USB_SRAM_BASE + 0x1C @ (endpoint 7 register) 
        .equ USB_SRAM_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_SRAM_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_SRAM_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_SRAM_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_SRAM_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_SRAM_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SRAM_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_SRAM_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_SRAM_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_SRAM_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_SRAM_USB_CNTR, USB_SRAM_BASE + 0x40 @ (control register) 
        .equ USB_SRAM_FRES_Shift, 0   @ bitWidth 1 (Force USB Reset)  
        .equ USB_SRAM_PDWN_Shift, 1   @ bitWidth 1 (Power down)  
        .equ USB_SRAM_LPMODE_Shift, 2   @ bitWidth 1 (Low-power mode)  
        .equ USB_SRAM_FSUSP_Shift, 3   @ bitWidth 1 (Force suspend)  
        .equ USB_SRAM_RESUME_Shift, 4   @ bitWidth 1 (Resume request)  
        .equ USB_SRAM_ESOFM_Shift, 8   @ bitWidth 1 (Expected start of frame interrupt  mask)  
        .equ USB_SRAM_SOFM_Shift, 9   @ bitWidth 1 (Start of frame interrupt  mask)  
        .equ USB_SRAM_RESETM_Shift, 10   @ bitWidth 1 (USB reset interrupt mask)  
        .equ USB_SRAM_SUSPM_Shift, 11   @ bitWidth 1 (Suspend mode interrupt  mask)  
        .equ USB_SRAM_WKUPM_Shift, 12   @ bitWidth 1 (Wakeup interrupt mask)  
        .equ USB_SRAM_ERRM_Shift, 13   @ bitWidth 1 (Error interrupt mask)  
        .equ USB_SRAM_PMAOVRM_Shift, 14   @ bitWidth 1 (Packet memory area over / underrun  interrupt mask)  
        .equ USB_SRAM_CTRM_Shift, 15   @ bitWidth 1 (Correct transfer interrupt  mask)  
 
    .equ USB_SRAM_ISTR, USB_SRAM_BASE + 0x44 @ (interrupt status register) 
        .equ USB_SRAM_EP_ID_Shift, 0   @ bitWidth 4 (Endpoint Identifier)  
        .equ USB_SRAM_DIR_Shift, 4   @ bitWidth 1 (Direction of transaction)  
        .equ USB_SRAM_ESOF_Shift, 8   @ bitWidth 1 (Expected start frame)  
        .equ USB_SRAM_SOF_Shift, 9   @ bitWidth 1 (start of frame)  
        .equ USB_SRAM_RESET_Shift, 10   @ bitWidth 1 (reset request)  
        .equ USB_SRAM_SUSP_Shift, 11   @ bitWidth 1 (Suspend mode request)  
        .equ USB_SRAM_WKUP_Shift, 12   @ bitWidth 1 (Wakeup)  
        .equ USB_SRAM_ERR_Shift, 13   @ bitWidth 1 (Error)  
        .equ USB_SRAM_PMAOVR_Shift, 14   @ bitWidth 1 (Packet memory area over /  underrun)  
        .equ USB_SRAM_CTR_Shift, 15   @ bitWidth 1 (Correct transfer)  
 
    .equ USB_SRAM_FNR, USB_SRAM_BASE + 0x48 @ (frame number register) 
        .equ USB_SRAM_FN_Shift, 0   @ bitWidth 11 (Frame number)  
        .equ USB_SRAM_LSOF_Shift, 11   @ bitWidth 2 (Lost SOF)  
        .equ USB_SRAM_LCK_Shift, 13   @ bitWidth 1 (Locked)  
        .equ USB_SRAM_RXDM_Shift, 14   @ bitWidth 1 (Receive data - line status)  
        .equ USB_SRAM_RXDP_Shift, 15   @ bitWidth 1 (Receive data + line status)  
 
    .equ USB_SRAM_DADDR, USB_SRAM_BASE + 0x4C @ (device address) 
        .equ USB_SRAM_ADD_Shift, 0   @ bitWidth 7 (Device address)  
        .equ USB_SRAM_EF_Shift, 7   @ bitWidth 1 (Enable function)  
 
    .equ USB_SRAM_BTABLE, USB_SRAM_BASE + 0x50 @ (Buffer table address) 
        .equ USB_SRAM_BTABLE_Shift, 3   @ bitWidth 13 (Buffer table)  
 

@=========================== WWDG ===========================@
.equ WWDG_BASE, 0x40002C00 @ (Window watchdog) 
    .equ WWDG_CR, WWDG_BASE + 0x0 @ (Control register) 
        .equ WWDG_WDGA_Shift, 7   @ bitWidth 1 (Activation bit)  
        .equ WWDG_T_Shift, 0   @ bitWidth 7 (7-bit counter MSB to LSB)  
 
    .equ WWDG_CFR, WWDG_BASE + 0x4 @ (Configuration register) 
        .equ WWDG_EWI_Shift, 9   @ bitWidth 1 (Early wakeup interrupt)  
        .equ WWDG_WDGTB1_Shift, 8   @ bitWidth 1 (Timer base)  
        .equ WWDG_WDGTB0_Shift, 7   @ bitWidth 1 (WDGTB0)  
        .equ WWDG_W_Shift, 0   @ bitWidth 7 (7-bit window value)  
 
    .equ WWDG_SR, WWDG_BASE + 0x8 @ (SR) 
        .equ WWDG_EWIF_Shift, 0   @ bitWidth 1 (EWIF)  
 

@=========================== ADC ===========================@
.equ ADC_BASE, 0x40012400 @ (Analog-to-digital converter) 
    .equ ADC_SR, ADC_BASE + 0x0 @ (status register) 
        .equ ADC_JCNR_Shift, 9   @ bitWidth 1 (Injected channel not ready)  
        .equ ADC_RCNR_Shift, 8   @ bitWidth 1 (Regular channel not ready)  
        .equ ADC_ADONS_Shift, 6   @ bitWidth 1 (ADC ON status)  
        .equ ADC_OVR_Shift, 5   @ bitWidth 1 (Overrun)  
        .equ ADC_STRT_Shift, 4   @ bitWidth 1 (Regular channel start flag)  
        .equ ADC_JSTRT_Shift, 3   @ bitWidth 1 (Injected channel start  flag)  
        .equ ADC_JEOC_Shift, 2   @ bitWidth 1 (Injected channel end of  conversion)  
        .equ ADC_EOC_Shift, 1   @ bitWidth 1 (Regular channel end of  conversion)  
        .equ ADC_AWD_Shift, 0   @ bitWidth 1 (Analog watchdog flag)  
 
    .equ ADC_CR1, ADC_BASE + 0x4 @ (control register 1) 
        .equ ADC_OVRIE_Shift, 26   @ bitWidth 1 (Overrun interrupt enable)  
        .equ ADC_RES_Shift, 24   @ bitWidth 2 (Resolution)  
        .equ ADC_AWDEN_Shift, 23   @ bitWidth 1 (Analog watchdog enable on regular  channels)  
        .equ ADC_JAWDEN_Shift, 22   @ bitWidth 1 (Analog watchdog enable on injected  channels)  
        .equ ADC_PDI_Shift, 17   @ bitWidth 1 (Power down during the idle  phase)  
        .equ ADC_PDD_Shift, 16   @ bitWidth 1 (Power down during the delay  phase)  
        .equ ADC_DISCNUM_Shift, 13   @ bitWidth 3 (Discontinuous mode channel  count)  
        .equ ADC_JDISCEN_Shift, 12   @ bitWidth 1 (Discontinuous mode on injected  channels)  
        .equ ADC_DISCEN_Shift, 11   @ bitWidth 1 (Discontinuous mode on regular  channels)  
        .equ ADC_JAUTO_Shift, 10   @ bitWidth 1 (Automatic injected group  conversion)  
        .equ ADC_AWDSGL_Shift, 9   @ bitWidth 1 (Enable the watchdog on a single channel  in scan mode)  
        .equ ADC_SCAN_Shift, 8   @ bitWidth 1 (Scan mode)  
        .equ ADC_JEOCIE_Shift, 7   @ bitWidth 1 (Interrupt enable for injected  channels)  
        .equ ADC_AWDIE_Shift, 6   @ bitWidth 1 (Analog watchdog interrupt  enable)  
        .equ ADC_EOCIE_Shift, 5   @ bitWidth 1 (Interrupt enable for EOC)  
        .equ ADC_AWDCH_Shift, 0   @ bitWidth 5 (Analog watchdog channel select  bits)  
 
    .equ ADC_CR2, ADC_BASE + 0x8 @ (control register 2) 
        .equ ADC_SWSTART_Shift, 30   @ bitWidth 1 (Start conversion of regular  channels)  
        .equ ADC_EXTEN_Shift, 28   @ bitWidth 2 (External trigger enable for regular  channels)  
        .equ ADC_EXTSEL_Shift, 24   @ bitWidth 4 (External event select for regular  group)  
        .equ ADC_JSWSTART_Shift, 22   @ bitWidth 1 (Start conversion of injected  channels)  
        .equ ADC_JEXTEN_Shift, 20   @ bitWidth 2 (External trigger enable for injected  channels)  
        .equ ADC_JEXTSEL_Shift, 16   @ bitWidth 4 (External event select for injected  group)  
        .equ ADC_ALIGN_Shift, 11   @ bitWidth 1 (Data alignment)  
        .equ ADC_EOCS_Shift, 10   @ bitWidth 1 (End of conversion  selection)  
        .equ ADC_DDS_Shift, 9   @ bitWidth 1 (DMA disable selection)  
        .equ ADC_DMA_Shift, 8   @ bitWidth 1 (Direct memory access mode)  
        .equ ADC_DELS_Shift, 4   @ bitWidth 3 (Delay selection)  
        .equ ADC_ADC_CFG_Shift, 2   @ bitWidth 1 (ADC configuration)  
        .equ ADC_CONT_Shift, 1   @ bitWidth 1 (Continuous conversion)  
        .equ ADC_ADON_Shift, 0   @ bitWidth 1 (A/D Converter ON / OFF)  
 
    .equ ADC_SMPR1, ADC_BASE + 0xC @ (sample time register 1) 
        .equ ADC_SampletimebitsSMPx_x_Shift, 0   @ bitWidth 32 (Reserved)  
 
    .equ ADC_SMPR2, ADC_BASE + 0x10 @ (sample time register 2) 
        .equ ADC_SampletimebitsSMPx_x_Shift, 0   @ bitWidth 32 (Reserved)  
 
    .equ ADC_SMPR3, ADC_BASE + 0x14 @ (sample time register 3) 
        .equ ADC_SampletimebitsSMPx_x_Shift, 0   @ bitWidth 32 (Reserved)  
 
    .equ ADC_JOFR1, ADC_BASE + 0x18 @ (injected channel data offset register  x) 
        .equ ADC_JOFFSET1_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC_JOFR2, ADC_BASE + 0x1C @ (injected channel data offset register  x) 
        .equ ADC_JOFFSET2_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC_JOFR3, ADC_BASE + 0x20 @ (injected channel data offset register  x) 
        .equ ADC_JOFFSET3_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC_JOFR4, ADC_BASE + 0x24 @ (injected channel data offset register  x) 
        .equ ADC_JOFFSET4_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC_HTR, ADC_BASE + 0x28 @ (watchdog higher threshold  register) 
        .equ ADC_HT_Shift, 0   @ bitWidth 12 (Analog watchdog higher  threshold)  
 
    .equ ADC_LTR, ADC_BASE + 0x2C @ (watchdog lower threshold  register) 
        .equ ADC_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower  threshold)  
 
    .equ ADC_SQR1, ADC_BASE + 0x30 @ (regular sequence register 1) 
        .equ ADC_L_Shift, 20   @ bitWidth 4 (Regular channel sequence  length)  
        .equ ADC_SQ28_Shift, 15   @ bitWidth 5 (28th conversion in regular  sequence)  
        .equ ADC_SQ27_Shift, 10   @ bitWidth 5 (27th conversion in regular  sequence)  
        .equ ADC_SQ26_Shift, 5   @ bitWidth 5 (26th conversion in regular  sequence)  
        .equ ADC_SQ25_Shift, 0   @ bitWidth 5 (25th conversion in regular  sequence)  
 
    .equ ADC_SQR2, ADC_BASE + 0x34 @ (regular sequence register 2) 
        .equ ADC_SQ24_Shift, 25   @ bitWidth 5 (24th conversion in regular  sequence)  
        .equ ADC_SQ23_Shift, 20   @ bitWidth 5 (23rd conversion in regular  sequence)  
        .equ ADC_SQ22_Shift, 15   @ bitWidth 5 (22nd conversion in regular  sequence)  
        .equ ADC_SQ21_Shift, 10   @ bitWidth 5 (21st conversion in regular  sequence)  
        .equ ADC_SQ20_Shift, 5   @ bitWidth 5 (20th conversion in regular  sequence)  
        .equ ADC_SQ19_Shift, 0   @ bitWidth 5 (19th conversion in regular  sequence)  
 
    .equ ADC_SQR3, ADC_BASE + 0x38 @ (regular sequence register 3) 
        .equ ADC_SQ18_Shift, 25   @ bitWidth 5 (18th conversion in regular  sequence)  
        .equ ADC_SQ17_Shift, 20   @ bitWidth 5 (17th conversion in regular  sequence)  
        .equ ADC_SQ16_Shift, 15   @ bitWidth 5 (16th conversion in regular  sequence)  
        .equ ADC_SQ15_Shift, 10   @ bitWidth 5 (15th conversion in regular  sequence)  
        .equ ADC_SQ14_Shift, 5   @ bitWidth 5 (14th conversion in regular  sequence)  
        .equ ADC_SQ13_Shift, 0   @ bitWidth 5 (13th conversion in regular  sequence)  
 
    .equ ADC_SQR4, ADC_BASE + 0x3C @ (regular sequence register 4) 
        .equ ADC_SQ12_Shift, 25   @ bitWidth 5 (12th conversion in regular  sequence)  
        .equ ADC_SQ11_Shift, 20   @ bitWidth 5 (11th conversion in regular  sequence)  
        .equ ADC_SQ10_Shift, 15   @ bitWidth 5 (10th conversion in regular  sequence)  
        .equ ADC_SQ9_Shift, 10   @ bitWidth 5 (9th conversion in regular  sequence)  
        .equ ADC_SQ8_Shift, 5   @ bitWidth 5 (8th conversion in regular  sequence)  
        .equ ADC_SQ7_Shift, 0   @ bitWidth 5 (7th conversion in regular  sequence)  
 
    .equ ADC_SQR5, ADC_BASE + 0x40 @ (regular sequence register 5) 
        .equ ADC_SQ6_Shift, 25   @ bitWidth 5 (6th conversion in regular  sequence)  
        .equ ADC_SQ5_Shift, 20   @ bitWidth 5 (5th conversion in regular  sequence)  
        .equ ADC_SQ4_Shift, 15   @ bitWidth 5 (4th conversion in regular  sequence)  
        .equ ADC_SQ3_Shift, 10   @ bitWidth 5 (3rd conversion in regular  sequence)  
        .equ ADC_SQ2_Shift, 5   @ bitWidth 5 (2nd conversion in regular  sequence)  
        .equ ADC_SQ1_Shift, 0   @ bitWidth 5 (1st conversion in regular  sequence)  
 
    .equ ADC_JSQR, ADC_BASE + 0x44 @ (injected sequence register) 
        .equ ADC_JL_Shift, 20   @ bitWidth 2 (Injected sequence length)  
        .equ ADC_JSQ4_Shift, 15   @ bitWidth 5 (4th conversion in injected  sequence)  
        .equ ADC_JSQ3_Shift, 10   @ bitWidth 5 (3rd conversion in injected  sequence)  
        .equ ADC_JSQ2_Shift, 5   @ bitWidth 5 (2nd conversion in injected  sequence)  
        .equ ADC_JSQ1_Shift, 0   @ bitWidth 5 (1st conversion in injected  sequence)  
 
    .equ ADC_JDR1, ADC_BASE + 0x48 @ (injected data register x) 
        .equ ADC_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC_JDR2, ADC_BASE + 0x4C @ (injected data register x) 
        .equ ADC_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC_JDR3, ADC_BASE + 0x50 @ (injected data register x) 
        .equ ADC_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC_JDR4, ADC_BASE + 0x54 @ (injected data register x) 
        .equ ADC_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC_DR, ADC_BASE + 0x58 @ (regular data register) 
        .equ ADC_RegularDATA_Shift, 0   @ bitWidth 16 (Regular data)  
 
    .equ ADC_SMPR0, ADC_BASE + 0x5C @ (sample time register 0) 
        .equ ADC_SampletimebitsSMPx_x_Shift, 0   @ bitWidth 32 (Reserved)  
 

@=========================== NVIC ===========================@
.equ NVIC_BASE, 0xE000E000 @ (Nested Vectored Interrupt  Controller) 
    .equ NVIC_ICTR, NVIC_BASE + 0x4 @ (Interrupt Controller Type  Register) 
        .equ NVIC_INTLINESNUM_Shift, 0   @ bitWidth 4 (Total number of interrupt lines in  groups)  
 
    .equ NVIC_STIR, NVIC_BASE + 0xF00 @ (Software Triggered Interrupt  Register) 
        .equ NVIC_INTID_Shift, 0   @ bitWidth 9 (interrupt to be triggered)  
 
    .equ NVIC_ISER0, NVIC_BASE + 0x100 @ (Interrupt Set-Enable Register) 
        .equ NVIC_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ISER1, NVIC_BASE + 0x104 @ (Interrupt Set-Enable Register) 
        .equ NVIC_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ICER0, NVIC_BASE + 0x180 @ (Interrupt Clear-Enable  Register) 
        .equ NVIC_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ICER1, NVIC_BASE + 0x184 @ (Interrupt Clear-Enable  Register) 
        .equ NVIC_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ISPR0, NVIC_BASE + 0x200 @ (Interrupt Set-Pending Register) 
        .equ NVIC_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ISPR1, NVIC_BASE + 0x204 @ (Interrupt Set-Pending Register) 
        .equ NVIC_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ICPR0, NVIC_BASE + 0x280 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_ICPR1, NVIC_BASE + 0x284 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_IABR0, NVIC_BASE + 0x300 @ (Interrupt Active Bit Register) 
        .equ NVIC_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IABR1, NVIC_BASE + 0x304 @ (Interrupt Active Bit Register) 
        .equ NVIC_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IPR0, NVIC_BASE + 0x400 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR1, NVIC_BASE + 0x404 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR2, NVIC_BASE + 0x408 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR3, NVIC_BASE + 0x40C @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR4, NVIC_BASE + 0x410 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR5, NVIC_BASE + 0x414 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR6, NVIC_BASE + 0x418 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR7, NVIC_BASE + 0x41C @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR8, NVIC_BASE + 0x420 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR9, NVIC_BASE + 0x424 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR10, NVIC_BASE + 0x428 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR11, NVIC_BASE + 0x42C @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR12, NVIC_BASE + 0x430 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR13, NVIC_BASE + 0x434 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 

@=========================== DBG ===========================@
.equ DBG_BASE, 0xE0042000 @ (Debug support) 
    .equ DBG_DBGMCU_IDCODE, DBG_BASE + 0x0 @ (IDCODE) 
        .equ DBG_DEV_ID_Shift, 0   @ bitWidth 12 (DEV_ID)  
        .equ DBG_REV_ID_Shift, 16   @ bitWidth 16 (REV_ID)  
 
    .equ DBG_DBGMCU_CR, DBG_BASE + 0x4 @ (Control Register) 
        .equ DBG_DBG_SLEEP_Shift, 0   @ bitWidth 1 (DBG_SLEEP)  
        .equ DBG_DBG_STOP_Shift, 1   @ bitWidth 1 (DBG_STOP)  
        .equ DBG_DBG_STANDBY_Shift, 2   @ bitWidth 1 (DBG_STANDBY)  
        .equ DBG_TRACE_IOEN_Shift, 5   @ bitWidth 1 (TRACE_IOEN)  
        .equ DBG_TRACE_MODE_Shift, 6   @ bitWidth 2 (TRACE_MODE)  
        .equ DBG_DBG_I2C2_SMBUS_TIMEOUT_Shift, 16   @ bitWidth 1 (DBG_I2C2_SMBUS_TIMEOUT)  
        .equ DBG_DBG_TIM8_STOP_Shift, 17   @ bitWidth 1 (DBG_TIM8_STOP)  
        .equ DBG_DBG_TIM5_STOP_Shift, 18   @ bitWidth 1 (DBG_TIM5_STOP)  
        .equ DBG_DBG_TIM6_STOP_Shift, 19   @ bitWidth 1 (DBG_TIM6_STOP)  
        .equ DBG_DBG_TIM7_STOP_Shift, 20   @ bitWidth 1 (DBG_TIM7_STOP)  
 
    .equ DBG_DBGMCU_APB1_FZ, DBG_BASE + 0x8 @ (Debug MCU APB1 Freeze registe) 
        .equ DBG_DBG_TIM2_STOP_Shift, 0   @ bitWidth 1 (DBG_TIM2_STOP)  
        .equ DBG_DBG_TIM3_STOP_Shift, 1   @ bitWidth 1 (DBG_TIM3 _STOP)  
        .equ DBG_DBG_TIM4_STOP_Shift, 2   @ bitWidth 1 (DBG_TIM4_STOP)  
        .equ DBG_DBG_TIM5_STOP_Shift, 3   @ bitWidth 1 (DBG_TIM5_STOP)  
        .equ DBG_DBG_TIM6_STOP_Shift, 4   @ bitWidth 1 (DBG_TIM6_STOP)  
        .equ DBG_DBG_TIM7_STOP_Shift, 5   @ bitWidth 1 (DBG_TIM7_STOP)  
        .equ DBG_DBG_TIM12_STOP_Shift, 6   @ bitWidth 1 (DBG_TIM12_STOP)  
        .equ DBG_DBG_TIM13_STOP_Shift, 7   @ bitWidth 1 (DBG_TIM13_STOP)  
        .equ DBG_DBG_TIM14_STOP_Shift, 8   @ bitWidth 1 (DBG_TIM14_STOP)  
        .equ DBG_DBG_WWDG_STOP_Shift, 11   @ bitWidth 1 (DBG_WWDG_STOP)  
        .equ DBG_DBG_IWDEG_STOP_Shift, 12   @ bitWidth 1 (DBG_IWDEG_STOP)  
        .equ DBG_DBG_J2C1_SMBUS_TIMEOUT_Shift, 21   @ bitWidth 1 (DBG_J2C1_SMBUS_TIMEOUT)  
        .equ DBG_DBG_J2C2_SMBUS_TIMEOUT_Shift, 22   @ bitWidth 1 (DBG_J2C2_SMBUS_TIMEOUT)  
        .equ DBG_DBG_J2C3SMBUS_TIMEOUT_Shift, 23   @ bitWidth 1 (DBG_J2C3SMBUS_TIMEOUT)  
        .equ DBG_DBG_CAN1_STOP_Shift, 25   @ bitWidth 1 (DBG_CAN1_STOP)  
        .equ DBG_DBG_CAN2_STOP_Shift, 26   @ bitWidth 1 (DBG_CAN2_STOP)  
 
    .equ DBG_DBGMCU_APB2_FZ, DBG_BASE + 0xC @ (Debug MCU APB2 Freeze registe) 
        .equ DBG_DBG_TIM1_STOP_Shift, 0   @ bitWidth 1 (TIM1 counter stopped when core is  halted)  
        .equ DBG_DBG_TIM8_STOP_Shift, 1   @ bitWidth 1 (TIM8 counter stopped when core is  halted)  
        .equ DBG_DBG_TIM9_STOP_Shift, 16   @ bitWidth 1 (TIM9 counter stopped when core is  halted)  
        .equ DBG_DBG_TIM10_STOP_Shift, 17   @ bitWidth 1 (TIM10 counter stopped when core is  halted)  
        .equ DBG_DBG_TIM11_STOP_Shift, 18   @ bitWidth 1 (TIM11 counter stopped when core is  halted)  
 
